/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 61.1.0
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the AudiencePreview type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AudiencePreview{}

// AudiencePreview An audience preview.
type AudiencePreview struct {
	// Unique identifier for tracking and retrieving results of an audience preview.
	Id string `json:"id"`
	// The audience type of the preview.  Possible values: USERS, ACCOUNTS, LINKED.
	AudienceType string                     `json:"audienceType"`
	Definition   AudienceDefinition         `json:"definition"`
	Options      ReadAudiencePreviewOptions `json:"options"`
	// Status for the audience preview.
	Status string `json:"status"`
	// Sampled result membership for the audience preview. Only has a value if the status is 'COMPLETED'.
	Results []AudiencePreviewResult `json:"results,omitempty"`
	Size    *AudienceSize           `json:"size,omitempty"`
	// Explanation of why the audience preview failed. Only has a value if status is 'FAILED'.
	FailureReason *string `json:"failureReason,omitempty"`
}

// NewAudiencePreview instantiates a new AudiencePreview object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAudiencePreview(
	id string,
	audienceType string,
	definition AudienceDefinition,
	options ReadAudiencePreviewOptions,
	status string,
) *AudiencePreview {
	this := AudiencePreview{}
	this.Id = id
	this.AudienceType = audienceType
	this.Definition = definition
	this.Options = options
	this.Status = status
	return &this
}

// NewAudiencePreviewWithDefaults instantiates a new AudiencePreview object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAudiencePreviewWithDefaults() *AudiencePreview {
	this := AudiencePreview{}
	return &this
}

// GetId returns the Id field value
func (o *AudiencePreview) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AudiencePreview) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AudiencePreview) SetId(v string) {
	o.Id = v
}

// GetAudienceType returns the AudienceType field value
func (o *AudiencePreview) GetAudienceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AudienceType
}

// GetAudienceTypeOk returns a tuple with the AudienceType field value
// and a boolean to check if the value has been set.
func (o *AudiencePreview) GetAudienceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AudienceType, true
}

// SetAudienceType sets field value
func (o *AudiencePreview) SetAudienceType(v string) {
	o.AudienceType = v
}

// GetDefinition returns the Definition field value
func (o *AudiencePreview) GetDefinition() AudienceDefinition {
	if o == nil {
		var ret AudienceDefinition
		return ret
	}

	return o.Definition
}

// GetDefinitionOk returns a tuple with the Definition field value
// and a boolean to check if the value has been set.
func (o *AudiencePreview) GetDefinitionOk() (*AudienceDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Definition, true
}

// SetDefinition sets field value
func (o *AudiencePreview) SetDefinition(v AudienceDefinition) {
	o.Definition = v
}

// GetOptions returns the Options field value
func (o *AudiencePreview) GetOptions() ReadAudiencePreviewOptions {
	if o == nil {
		var ret ReadAudiencePreviewOptions
		return ret
	}

	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value
// and a boolean to check if the value has been set.
func (o *AudiencePreview) GetOptionsOk() (*ReadAudiencePreviewOptions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Options, true
}

// SetOptions sets field value
func (o *AudiencePreview) SetOptions(v ReadAudiencePreviewOptions) {
	o.Options = v
}

// GetStatus returns the Status field value
func (o *AudiencePreview) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *AudiencePreview) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *AudiencePreview) SetStatus(v string) {
	o.Status = v
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *AudiencePreview) GetResults() []AudiencePreviewResult {
	if o == nil || IsNil(o.Results) {
		var ret []AudiencePreviewResult
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudiencePreview) GetResultsOk() ([]AudiencePreviewResult, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *AudiencePreview) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []AudiencePreviewResult and assigns it to the Results field.
func (o *AudiencePreview) SetResults(v []AudiencePreviewResult) {
	o.Results = v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *AudiencePreview) GetSize() AudienceSize {
	if o == nil || IsNil(o.Size) {
		var ret AudienceSize
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudiencePreview) GetSizeOk() (*AudienceSize, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *AudiencePreview) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given AudienceSize and assigns it to the Size field.
func (o *AudiencePreview) SetSize(v AudienceSize) {
	o.Size = &v
}

// GetFailureReason returns the FailureReason field value if set, zero value otherwise.
func (o *AudiencePreview) GetFailureReason() string {
	if o == nil || IsNil(o.FailureReason) {
		var ret string
		return ret
	}
	return *o.FailureReason
}

// GetFailureReasonOk returns a tuple with the FailureReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudiencePreview) GetFailureReasonOk() (*string, bool) {
	if o == nil || IsNil(o.FailureReason) {
		return nil, false
	}
	return o.FailureReason, true
}

// HasFailureReason returns a boolean if a field has been set.
func (o *AudiencePreview) HasFailureReason() bool {
	if o != nil && !IsNil(o.FailureReason) {
		return true
	}

	return false
}

// SetFailureReason gets a reference to the given string and assigns it to the FailureReason field.
func (o *AudiencePreview) SetFailureReason(v string) {
	o.FailureReason = &v
}

func (o AudiencePreview) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AudiencePreview) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["audienceType"] = o.AudienceType
	toSerialize["definition"] = o.Definition
	toSerialize["options"] = o.Options
	toSerialize["status"] = o.Status
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.FailureReason) {
		toSerialize["failureReason"] = o.FailureReason
	}
	return toSerialize, nil
}

type NullableAudiencePreview struct {
	value *AudiencePreview
	isSet bool
}

func (v NullableAudiencePreview) Get() *AudiencePreview {
	return v.value
}

func (v *NullableAudiencePreview) Set(val *AudiencePreview) {
	v.value = val
	v.isSet = true
}

func (v NullableAudiencePreview) IsSet() bool {
	return v.isSet
}

func (v *NullableAudiencePreview) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAudiencePreview(val *AudiencePreview) *NullableAudiencePreview {
	return &NullableAudiencePreview{value: val, isSet: true}
}

func (v NullableAudiencePreview) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAudiencePreview) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
