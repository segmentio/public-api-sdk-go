/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 57.4.0
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the UpdateDestinationsForJourneyAlphaOutput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateDestinationsForJourneyAlphaOutput{}

// UpdateDestinationsForJourneyAlphaOutput DESTINATION update response.
type UpdateDestinationsForJourneyAlphaOutput struct {
	// The journey container id.
	ContainerId string `json:"containerId"`
	// The version of journey.
	Version *float32 `json:"version,omitempty"`
	// The updated DESTINATIONS.
	Destinations []DestinationState `json:"destinations"`
}

// NewUpdateDestinationsForJourneyAlphaOutput instantiates a new UpdateDestinationsForJourneyAlphaOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateDestinationsForJourneyAlphaOutput(
	containerId string,
	destinations []DestinationState,
) *UpdateDestinationsForJourneyAlphaOutput {
	this := UpdateDestinationsForJourneyAlphaOutput{}
	this.ContainerId = containerId
	this.Destinations = destinations
	return &this
}

// NewUpdateDestinationsForJourneyAlphaOutputWithDefaults instantiates a new UpdateDestinationsForJourneyAlphaOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateDestinationsForJourneyAlphaOutputWithDefaults() *UpdateDestinationsForJourneyAlphaOutput {
	this := UpdateDestinationsForJourneyAlphaOutput{}
	return &this
}

// GetContainerId returns the ContainerId field value
func (o *UpdateDestinationsForJourneyAlphaOutput) GetContainerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContainerId
}

// GetContainerIdOk returns a tuple with the ContainerId field value
// and a boolean to check if the value has been set.
func (o *UpdateDestinationsForJourneyAlphaOutput) GetContainerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContainerId, true
}

// SetContainerId sets field value
func (o *UpdateDestinationsForJourneyAlphaOutput) SetContainerId(v string) {
	o.ContainerId = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *UpdateDestinationsForJourneyAlphaOutput) GetVersion() float32 {
	if o == nil || IsNil(o.Version) {
		var ret float32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDestinationsForJourneyAlphaOutput) GetVersionOk() (*float32, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *UpdateDestinationsForJourneyAlphaOutput) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given float32 and assigns it to the Version field.
func (o *UpdateDestinationsForJourneyAlphaOutput) SetVersion(v float32) {
	o.Version = &v
}

// GetDestinations returns the Destinations field value
func (o *UpdateDestinationsForJourneyAlphaOutput) GetDestinations() []DestinationState {
	if o == nil {
		var ret []DestinationState
		return ret
	}

	return o.Destinations
}

// GetDestinationsOk returns a tuple with the Destinations field value
// and a boolean to check if the value has been set.
func (o *UpdateDestinationsForJourneyAlphaOutput) GetDestinationsOk() ([]DestinationState, bool) {
	if o == nil {
		return nil, false
	}
	return o.Destinations, true
}

// SetDestinations sets field value
func (o *UpdateDestinationsForJourneyAlphaOutput) SetDestinations(v []DestinationState) {
	o.Destinations = v
}

func (o UpdateDestinationsForJourneyAlphaOutput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateDestinationsForJourneyAlphaOutput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["containerId"] = o.ContainerId
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	toSerialize["destinations"] = o.Destinations
	return toSerialize, nil
}

type NullableUpdateDestinationsForJourneyAlphaOutput struct {
	value *UpdateDestinationsForJourneyAlphaOutput
	isSet bool
}

func (v NullableUpdateDestinationsForJourneyAlphaOutput) Get() *UpdateDestinationsForJourneyAlphaOutput {
	return v.value
}

func (v *NullableUpdateDestinationsForJourneyAlphaOutput) Set(
	val *UpdateDestinationsForJourneyAlphaOutput,
) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDestinationsForJourneyAlphaOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDestinationsForJourneyAlphaOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDestinationsForJourneyAlphaOutput(
	val *UpdateDestinationsForJourneyAlphaOutput,
) *NullableUpdateDestinationsForJourneyAlphaOutput {
	return &NullableUpdateDestinationsForJourneyAlphaOutput{value: val, isSet: true}
}

func (v NullableUpdateDestinationsForJourneyAlphaOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDestinationsForJourneyAlphaOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
