/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 59.6.0
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the Download type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Download{}

// Download struct for Download
type Download struct {
	// List of presigned URLs from S3.
	Urls []string `json:"urls"`
}

// NewDownload instantiates a new Download object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDownload(urls []string) *Download {
	this := Download{}
	this.Urls = urls
	return &this
}

// NewDownloadWithDefaults instantiates a new Download object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDownloadWithDefaults() *Download {
	this := Download{}
	return &this
}

// GetUrls returns the Urls field value
func (o *Download) GetUrls() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Urls
}

// GetUrlsOk returns a tuple with the Urls field value
// and a boolean to check if the value has been set.
func (o *Download) GetUrlsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Urls, true
}

// SetUrls sets field value
func (o *Download) SetUrls(v []string) {
	o.Urls = v
}

func (o Download) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Download) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["urls"] = o.Urls
	return toSerialize, nil
}

type NullableDownload struct {
	value *Download
	isSet bool
}

func (v NullableDownload) Get() *Download {
	return v.value
}

func (v *NullableDownload) Set(val *Download) {
	v.value = val
	v.isSet = true
}

func (v NullableDownload) IsSet() bool {
	return v.isSet
}

func (v *NullableDownload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDownload(val *Download) *NullableDownload {
	return &NullableDownload{value: val, isSet: true}
}

func (v NullableDownload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDownload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
