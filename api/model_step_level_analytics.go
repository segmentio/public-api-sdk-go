/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 58.1.1
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the StepLevelAnalytics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StepLevelAnalytics{}

// StepLevelAnalytics struct for StepLevelAnalytics
type StepLevelAnalytics struct {
	From      *Key      `json:"from,omitempty"`
	To        Key       `json:"to"`
	Analytics Analytics `json:"analytics"`
}

// NewStepLevelAnalytics instantiates a new StepLevelAnalytics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStepLevelAnalytics(to Key, analytics Analytics) *StepLevelAnalytics {
	this := StepLevelAnalytics{}
	this.To = to
	this.Analytics = analytics
	return &this
}

// NewStepLevelAnalyticsWithDefaults instantiates a new StepLevelAnalytics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStepLevelAnalyticsWithDefaults() *StepLevelAnalytics {
	this := StepLevelAnalytics{}
	return &this
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *StepLevelAnalytics) GetFrom() Key {
	if o == nil || IsNil(o.From) {
		var ret Key
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StepLevelAnalytics) GetFromOk() (*Key, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *StepLevelAnalytics) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given Key and assigns it to the From field.
func (o *StepLevelAnalytics) SetFrom(v Key) {
	o.From = &v
}

// GetTo returns the To field value
func (o *StepLevelAnalytics) GetTo() Key {
	if o == nil {
		var ret Key
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *StepLevelAnalytics) GetToOk() (*Key, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *StepLevelAnalytics) SetTo(v Key) {
	o.To = v
}

// GetAnalytics returns the Analytics field value
func (o *StepLevelAnalytics) GetAnalytics() Analytics {
	if o == nil {
		var ret Analytics
		return ret
	}

	return o.Analytics
}

// GetAnalyticsOk returns a tuple with the Analytics field value
// and a boolean to check if the value has been set.
func (o *StepLevelAnalytics) GetAnalyticsOk() (*Analytics, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Analytics, true
}

// SetAnalytics sets field value
func (o *StepLevelAnalytics) SetAnalytics(v Analytics) {
	o.Analytics = v
}

func (o StepLevelAnalytics) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StepLevelAnalytics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	toSerialize["to"] = o.To
	toSerialize["analytics"] = o.Analytics
	return toSerialize, nil
}

type NullableStepLevelAnalytics struct {
	value *StepLevelAnalytics
	isSet bool
}

func (v NullableStepLevelAnalytics) Get() *StepLevelAnalytics {
	return v.value
}

func (v *NullableStepLevelAnalytics) Set(val *StepLevelAnalytics) {
	v.value = val
	v.isSet = true
}

func (v NullableStepLevelAnalytics) IsSet() bool {
	return v.isSet
}

func (v *NullableStepLevelAnalytics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStepLevelAnalytics(val *StepLevelAnalytics) *NullableStepLevelAnalytics {
	return &NullableStepLevelAnalytics{value: val, isSet: true}
}

func (v NullableStepLevelAnalytics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStepLevelAnalytics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
