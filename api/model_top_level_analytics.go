/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 58.1.1
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the TopLevelAnalytics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TopLevelAnalytics{}

// TopLevelAnalytics struct for TopLevelAnalytics
type TopLevelAnalytics struct {
	Entered    Analytics  `json:"entered"`
	Completed  Analytics  `json:"completed"`
	InProgress Analytics  `json:"inProgress"`
	Exited     *Analytics `json:"exited,omitempty"`
}

// NewTopLevelAnalytics instantiates a new TopLevelAnalytics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTopLevelAnalytics(
	entered Analytics,
	completed Analytics,
	inProgress Analytics,
) *TopLevelAnalytics {
	this := TopLevelAnalytics{}
	this.Entered = entered
	this.Completed = completed
	this.InProgress = inProgress
	return &this
}

// NewTopLevelAnalyticsWithDefaults instantiates a new TopLevelAnalytics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTopLevelAnalyticsWithDefaults() *TopLevelAnalytics {
	this := TopLevelAnalytics{}
	return &this
}

// GetEntered returns the Entered field value
func (o *TopLevelAnalytics) GetEntered() Analytics {
	if o == nil {
		var ret Analytics
		return ret
	}

	return o.Entered
}

// GetEnteredOk returns a tuple with the Entered field value
// and a boolean to check if the value has been set.
func (o *TopLevelAnalytics) GetEnteredOk() (*Analytics, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Entered, true
}

// SetEntered sets field value
func (o *TopLevelAnalytics) SetEntered(v Analytics) {
	o.Entered = v
}

// GetCompleted returns the Completed field value
func (o *TopLevelAnalytics) GetCompleted() Analytics {
	if o == nil {
		var ret Analytics
		return ret
	}

	return o.Completed
}

// GetCompletedOk returns a tuple with the Completed field value
// and a boolean to check if the value has been set.
func (o *TopLevelAnalytics) GetCompletedOk() (*Analytics, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Completed, true
}

// SetCompleted sets field value
func (o *TopLevelAnalytics) SetCompleted(v Analytics) {
	o.Completed = v
}

// GetInProgress returns the InProgress field value
func (o *TopLevelAnalytics) GetInProgress() Analytics {
	if o == nil {
		var ret Analytics
		return ret
	}

	return o.InProgress
}

// GetInProgressOk returns a tuple with the InProgress field value
// and a boolean to check if the value has been set.
func (o *TopLevelAnalytics) GetInProgressOk() (*Analytics, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InProgress, true
}

// SetInProgress sets field value
func (o *TopLevelAnalytics) SetInProgress(v Analytics) {
	o.InProgress = v
}

// GetExited returns the Exited field value if set, zero value otherwise.
func (o *TopLevelAnalytics) GetExited() Analytics {
	if o == nil || IsNil(o.Exited) {
		var ret Analytics
		return ret
	}
	return *o.Exited
}

// GetExitedOk returns a tuple with the Exited field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopLevelAnalytics) GetExitedOk() (*Analytics, bool) {
	if o == nil || IsNil(o.Exited) {
		return nil, false
	}
	return o.Exited, true
}

// HasExited returns a boolean if a field has been set.
func (o *TopLevelAnalytics) HasExited() bool {
	if o != nil && !IsNil(o.Exited) {
		return true
	}

	return false
}

// SetExited gets a reference to the given Analytics and assigns it to the Exited field.
func (o *TopLevelAnalytics) SetExited(v Analytics) {
	o.Exited = &v
}

func (o TopLevelAnalytics) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TopLevelAnalytics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["entered"] = o.Entered
	toSerialize["completed"] = o.Completed
	toSerialize["inProgress"] = o.InProgress
	if !IsNil(o.Exited) {
		toSerialize["exited"] = o.Exited
	}
	return toSerialize, nil
}

type NullableTopLevelAnalytics struct {
	value *TopLevelAnalytics
	isSet bool
}

func (v NullableTopLevelAnalytics) Get() *TopLevelAnalytics {
	return v.value
}

func (v *NullableTopLevelAnalytics) Set(val *TopLevelAnalytics) {
	v.value = val
	v.isSet = true
}

func (v NullableTopLevelAnalytics) IsSet() bool {
	return v.isSet
}

func (v *NullableTopLevelAnalytics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTopLevelAnalytics(val *TopLevelAnalytics) *NullableTopLevelAnalytics {
	return &NullableTopLevelAnalytics{value: val, isSet: true}
}

func (v NullableTopLevelAnalytics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTopLevelAnalytics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
