/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 60.1.2
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the DestinationInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DestinationInput{}

// DestinationInput The Destination Input Object.
type DestinationInput struct {
	// The Destination instance id.
	Id string `json:"id"`
	// Type of Destination to add to the audience.
	Type string `json:"type"`
}

// NewDestinationInput instantiates a new DestinationInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDestinationInput(id string, type_ string) *DestinationInput {
	this := DestinationInput{}
	this.Id = id
	this.Type = type_
	return &this
}

// NewDestinationInputWithDefaults instantiates a new DestinationInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDestinationInputWithDefaults() *DestinationInput {
	this := DestinationInput{}
	return &this
}

// GetId returns the Id field value
func (o *DestinationInput) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DestinationInput) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DestinationInput) SetId(v string) {
	o.Id = v
}

// GetType returns the Type field value
func (o *DestinationInput) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DestinationInput) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DestinationInput) SetType(v string) {
	o.Type = v
}

func (o DestinationInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DestinationInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableDestinationInput struct {
	value *DestinationInput
	isSet bool
}

func (v NullableDestinationInput) Get() *DestinationInput {
	return v.value
}

func (v *NullableDestinationInput) Set(val *DestinationInput) {
	v.value = val
	v.isSet = true
}

func (v NullableDestinationInput) IsSet() bool {
	return v.isSet
}

func (v *NullableDestinationInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDestinationInput(val *DestinationInput) *NullableDestinationInput {
	return &NullableDestinationInput{value: val, isSet: true}
}

func (v NullableDestinationInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDestinationInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
