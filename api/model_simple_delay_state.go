/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 58.1.1
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the SimpleDelayState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SimpleDelayState{}

// SimpleDelayState struct for SimpleDelayState
type SimpleDelayState struct {
	Type        string        `json:"type"`
	Duration    string        `json:"duration"`
	Transitions []Transitions `json:"transitions"`
	Key         Key           `json:"key"`
}

// NewSimpleDelayState instantiates a new SimpleDelayState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSimpleDelayState(
	type_ string,
	duration string,
	transitions []Transitions,
	key Key,
) *SimpleDelayState {
	this := SimpleDelayState{}
	this.Type = type_
	this.Duration = duration
	this.Transitions = transitions
	this.Key = key
	return &this
}

// NewSimpleDelayStateWithDefaults instantiates a new SimpleDelayState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSimpleDelayStateWithDefaults() *SimpleDelayState {
	this := SimpleDelayState{}
	return &this
}

// GetType returns the Type field value
func (o *SimpleDelayState) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SimpleDelayState) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SimpleDelayState) SetType(v string) {
	o.Type = v
}

// GetDuration returns the Duration field value
func (o *SimpleDelayState) GetDuration() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Duration
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
func (o *SimpleDelayState) GetDurationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Duration, true
}

// SetDuration sets field value
func (o *SimpleDelayState) SetDuration(v string) {
	o.Duration = v
}

// GetTransitions returns the Transitions field value
func (o *SimpleDelayState) GetTransitions() []Transitions {
	if o == nil {
		var ret []Transitions
		return ret
	}

	return o.Transitions
}

// GetTransitionsOk returns a tuple with the Transitions field value
// and a boolean to check if the value has been set.
func (o *SimpleDelayState) GetTransitionsOk() ([]Transitions, bool) {
	if o == nil {
		return nil, false
	}
	return o.Transitions, true
}

// SetTransitions sets field value
func (o *SimpleDelayState) SetTransitions(v []Transitions) {
	o.Transitions = v
}

// GetKey returns the Key field value
func (o *SimpleDelayState) GetKey() Key {
	if o == nil {
		var ret Key
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *SimpleDelayState) GetKeyOk() (*Key, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *SimpleDelayState) SetKey(v Key) {
	o.Key = v
}

func (o SimpleDelayState) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SimpleDelayState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["duration"] = o.Duration
	toSerialize["transitions"] = o.Transitions
	toSerialize["key"] = o.Key
	return toSerialize, nil
}

type NullableSimpleDelayState struct {
	value *SimpleDelayState
	isSet bool
}

func (v NullableSimpleDelayState) Get() *SimpleDelayState {
	return v.value
}

func (v *NullableSimpleDelayState) Set(val *SimpleDelayState) {
	v.value = val
	v.isSet = true
}

func (v NullableSimpleDelayState) IsSet() bool {
	return v.isSet
}

func (v *NullableSimpleDelayState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSimpleDelayState(val *SimpleDelayState) *NullableSimpleDelayState {
	return &NullableSimpleDelayState{value: val, isSet: true}
}

func (v NullableSimpleDelayState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSimpleDelayState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
