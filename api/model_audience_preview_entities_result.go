/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 58.13.0
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the AudiencePreviewEntitiesResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AudiencePreviewEntitiesResult{}

// AudiencePreviewEntitiesResult Result membership object for an audience preview with `audienceType: USERS` or `audienceType: LINKED`.
type AudiencePreviewEntitiesResult struct {
	Entities *map[string][]EntityProfileDetails `json:"entities,omitempty"`
}

// NewAudiencePreviewEntitiesResult instantiates a new AudiencePreviewEntitiesResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAudiencePreviewEntitiesResult() *AudiencePreviewEntitiesResult {
	this := AudiencePreviewEntitiesResult{}
	return &this
}

// NewAudiencePreviewEntitiesResultWithDefaults instantiates a new AudiencePreviewEntitiesResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAudiencePreviewEntitiesResultWithDefaults() *AudiencePreviewEntitiesResult {
	this := AudiencePreviewEntitiesResult{}
	return &this
}

// GetEntities returns the Entities field value if set, zero value otherwise.
func (o *AudiencePreviewEntitiesResult) GetEntities() map[string][]EntityProfileDetails {
	if o == nil || IsNil(o.Entities) {
		var ret map[string][]EntityProfileDetails
		return ret
	}
	return *o.Entities
}

// GetEntitiesOk returns a tuple with the Entities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudiencePreviewEntitiesResult) GetEntitiesOk() (*map[string][]EntityProfileDetails, bool) {
	if o == nil || IsNil(o.Entities) {
		return nil, false
	}
	return o.Entities, true
}

// HasEntities returns a boolean if a field has been set.
func (o *AudiencePreviewEntitiesResult) HasEntities() bool {
	if o != nil && !IsNil(o.Entities) {
		return true
	}

	return false
}

// SetEntities gets a reference to the given map[string][]EntityProfileDetails and assigns it to the Entities field.
func (o *AudiencePreviewEntitiesResult) SetEntities(v map[string][]EntityProfileDetails) {
	o.Entities = &v
}

func (o AudiencePreviewEntitiesResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AudiencePreviewEntitiesResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Entities) {
		toSerialize["entities"] = o.Entities
	}
	return toSerialize, nil
}

type NullableAudiencePreviewEntitiesResult struct {
	value *AudiencePreviewEntitiesResult
	isSet bool
}

func (v NullableAudiencePreviewEntitiesResult) Get() *AudiencePreviewEntitiesResult {
	return v.value
}

func (v *NullableAudiencePreviewEntitiesResult) Set(val *AudiencePreviewEntitiesResult) {
	v.value = val
	v.isSet = true
}

func (v NullableAudiencePreviewEntitiesResult) IsSet() bool {
	return v.isSet
}

func (v *NullableAudiencePreviewEntitiesResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAudiencePreviewEntitiesResult(
	val *AudiencePreviewEntitiesResult,
) *NullableAudiencePreviewEntitiesResult {
	return &NullableAudiencePreviewEntitiesResult{value: val, isSet: true}
}

func (v NullableAudiencePreviewEntitiesResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAudiencePreviewEntitiesResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
