/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 57.4.0
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the ListTrackingPlansV1Output type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListTrackingPlansV1Output{}

// ListTrackingPlansV1Output Lists the Tracking Plans associated with the current Workspace.
type ListTrackingPlansV1Output struct {
	// A paginated list of Tracking Plans.
	TrackingPlans []TrackingPlanV1 `json:"trackingPlans"`
	Pagination    PaginationOutput `json:"pagination"`
}

// NewListTrackingPlansV1Output instantiates a new ListTrackingPlansV1Output object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListTrackingPlansV1Output(
	trackingPlans []TrackingPlanV1,
	pagination PaginationOutput,
) *ListTrackingPlansV1Output {
	this := ListTrackingPlansV1Output{}
	this.TrackingPlans = trackingPlans
	this.Pagination = pagination
	return &this
}

// NewListTrackingPlansV1OutputWithDefaults instantiates a new ListTrackingPlansV1Output object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListTrackingPlansV1OutputWithDefaults() *ListTrackingPlansV1Output {
	this := ListTrackingPlansV1Output{}
	return &this
}

// GetTrackingPlans returns the TrackingPlans field value
func (o *ListTrackingPlansV1Output) GetTrackingPlans() []TrackingPlanV1 {
	if o == nil {
		var ret []TrackingPlanV1
		return ret
	}

	return o.TrackingPlans
}

// GetTrackingPlansOk returns a tuple with the TrackingPlans field value
// and a boolean to check if the value has been set.
func (o *ListTrackingPlansV1Output) GetTrackingPlansOk() ([]TrackingPlanV1, bool) {
	if o == nil {
		return nil, false
	}
	return o.TrackingPlans, true
}

// SetTrackingPlans sets field value
func (o *ListTrackingPlansV1Output) SetTrackingPlans(v []TrackingPlanV1) {
	o.TrackingPlans = v
}

// GetPagination returns the Pagination field value
func (o *ListTrackingPlansV1Output) GetPagination() PaginationOutput {
	if o == nil {
		var ret PaginationOutput
		return ret
	}

	return o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value
// and a boolean to check if the value has been set.
func (o *ListTrackingPlansV1Output) GetPaginationOk() (*PaginationOutput, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pagination, true
}

// SetPagination sets field value
func (o *ListTrackingPlansV1Output) SetPagination(v PaginationOutput) {
	o.Pagination = v
}

func (o ListTrackingPlansV1Output) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListTrackingPlansV1Output) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["trackingPlans"] = o.TrackingPlans
	toSerialize["pagination"] = o.Pagination
	return toSerialize, nil
}

type NullableListTrackingPlansV1Output struct {
	value *ListTrackingPlansV1Output
	isSet bool
}

func (v NullableListTrackingPlansV1Output) Get() *ListTrackingPlansV1Output {
	return v.value
}

func (v *NullableListTrackingPlansV1Output) Set(val *ListTrackingPlansV1Output) {
	v.value = val
	v.isSet = true
}

func (v NullableListTrackingPlansV1Output) IsSet() bool {
	return v.isSet
}

func (v *NullableListTrackingPlansV1Output) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListTrackingPlansV1Output(
	val *ListTrackingPlansV1Output,
) *NullableListTrackingPlansV1Output {
	return &NullableListTrackingPlansV1Output{value: val, isSet: true}
}

func (v NullableListTrackingPlansV1Output) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListTrackingPlansV1Output) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
