/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 58.1.1
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the ActionDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActionDefinition{}

// ActionDefinition struct for ActionDefinition
type ActionDefinition struct {
	Id                 *string                `json:"id,omitempty"`
	UseDefaultMappings *bool                  `json:"useDefaultMappings,omitempty"`
	Mappings           map[string]interface{} `json:"mappings"`
	ActionId           string                 `json:"actionId"`
	Enabled            *bool                  `json:"enabled,omitempty"`
	Name               *string                `json:"name,omitempty"`
}

// NewActionDefinition instantiates a new ActionDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionDefinition(mappings map[string]interface{}, actionId string) *ActionDefinition {
	this := ActionDefinition{}
	this.Mappings = mappings
	this.ActionId = actionId
	return &this
}

// NewActionDefinitionWithDefaults instantiates a new ActionDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionDefinitionWithDefaults() *ActionDefinition {
	this := ActionDefinition{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ActionDefinition) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionDefinition) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ActionDefinition) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ActionDefinition) SetId(v string) {
	o.Id = &v
}

// GetUseDefaultMappings returns the UseDefaultMappings field value if set, zero value otherwise.
func (o *ActionDefinition) GetUseDefaultMappings() bool {
	if o == nil || IsNil(o.UseDefaultMappings) {
		var ret bool
		return ret
	}
	return *o.UseDefaultMappings
}

// GetUseDefaultMappingsOk returns a tuple with the UseDefaultMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionDefinition) GetUseDefaultMappingsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDefaultMappings) {
		return nil, false
	}
	return o.UseDefaultMappings, true
}

// HasUseDefaultMappings returns a boolean if a field has been set.
func (o *ActionDefinition) HasUseDefaultMappings() bool {
	if o != nil && !IsNil(o.UseDefaultMappings) {
		return true
	}

	return false
}

// SetUseDefaultMappings gets a reference to the given bool and assigns it to the UseDefaultMappings field.
func (o *ActionDefinition) SetUseDefaultMappings(v bool) {
	o.UseDefaultMappings = &v
}

// GetMappings returns the Mappings field value
func (o *ActionDefinition) GetMappings() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Mappings
}

// GetMappingsOk returns a tuple with the Mappings field value
// and a boolean to check if the value has been set.
func (o *ActionDefinition) GetMappingsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Mappings, true
}

// SetMappings sets field value
func (o *ActionDefinition) SetMappings(v map[string]interface{}) {
	o.Mappings = v
}

// GetActionId returns the ActionId field value
func (o *ActionDefinition) GetActionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ActionId
}

// GetActionIdOk returns a tuple with the ActionId field value
// and a boolean to check if the value has been set.
func (o *ActionDefinition) GetActionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActionId, true
}

// SetActionId sets field value
func (o *ActionDefinition) SetActionId(v string) {
	o.ActionId = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ActionDefinition) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionDefinition) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ActionDefinition) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ActionDefinition) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ActionDefinition) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionDefinition) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ActionDefinition) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ActionDefinition) SetName(v string) {
	o.Name = &v
}

func (o ActionDefinition) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActionDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.UseDefaultMappings) {
		toSerialize["useDefaultMappings"] = o.UseDefaultMappings
	}
	toSerialize["mappings"] = o.Mappings
	toSerialize["actionId"] = o.ActionId
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableActionDefinition struct {
	value *ActionDefinition
	isSet bool
}

func (v NullableActionDefinition) Get() *ActionDefinition {
	return v.value
}

func (v *NullableActionDefinition) Set(val *ActionDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableActionDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableActionDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionDefinition(val *ActionDefinition) *NullableActionDefinition {
	return &NullableActionDefinition{value: val, isSet: true}
}

func (v NullableActionDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
