/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 58.5.0
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the HashPropertiesConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HashPropertiesConfiguration{}

// HashPropertiesConfiguration struct for HashPropertiesConfiguration
type HashPropertiesConfiguration struct {
	// Which algorithm to use to hash to properties.
	Algorithm string `json:"algorithm"`
	// Optional key to hash with.
	Key *string `json:"key,omitempty"`
	// Optional encoding to use for the hashing.
	Encoding *string `json:"encoding,omitempty"`
	// The paths to the properties to be hashed.
	Paths []string `json:"paths"`
}

// NewHashPropertiesConfiguration instantiates a new HashPropertiesConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHashPropertiesConfiguration(algorithm string, paths []string) *HashPropertiesConfiguration {
	this := HashPropertiesConfiguration{}
	this.Algorithm = algorithm
	this.Paths = paths
	return &this
}

// NewHashPropertiesConfigurationWithDefaults instantiates a new HashPropertiesConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHashPropertiesConfigurationWithDefaults() *HashPropertiesConfiguration {
	this := HashPropertiesConfiguration{}
	return &this
}

// GetAlgorithm returns the Algorithm field value
func (o *HashPropertiesConfiguration) GetAlgorithm() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Algorithm
}

// GetAlgorithmOk returns a tuple with the Algorithm field value
// and a boolean to check if the value has been set.
func (o *HashPropertiesConfiguration) GetAlgorithmOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Algorithm, true
}

// SetAlgorithm sets field value
func (o *HashPropertiesConfiguration) SetAlgorithm(v string) {
	o.Algorithm = v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *HashPropertiesConfiguration) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HashPropertiesConfiguration) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *HashPropertiesConfiguration) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *HashPropertiesConfiguration) SetKey(v string) {
	o.Key = &v
}

// GetEncoding returns the Encoding field value if set, zero value otherwise.
func (o *HashPropertiesConfiguration) GetEncoding() string {
	if o == nil || IsNil(o.Encoding) {
		var ret string
		return ret
	}
	return *o.Encoding
}

// GetEncodingOk returns a tuple with the Encoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HashPropertiesConfiguration) GetEncodingOk() (*string, bool) {
	if o == nil || IsNil(o.Encoding) {
		return nil, false
	}
	return o.Encoding, true
}

// HasEncoding returns a boolean if a field has been set.
func (o *HashPropertiesConfiguration) HasEncoding() bool {
	if o != nil && !IsNil(o.Encoding) {
		return true
	}

	return false
}

// SetEncoding gets a reference to the given string and assigns it to the Encoding field.
func (o *HashPropertiesConfiguration) SetEncoding(v string) {
	o.Encoding = &v
}

// GetPaths returns the Paths field value
func (o *HashPropertiesConfiguration) GetPaths() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Paths
}

// GetPathsOk returns a tuple with the Paths field value
// and a boolean to check if the value has been set.
func (o *HashPropertiesConfiguration) GetPathsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Paths, true
}

// SetPaths sets field value
func (o *HashPropertiesConfiguration) SetPaths(v []string) {
	o.Paths = v
}

func (o HashPropertiesConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HashPropertiesConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["algorithm"] = o.Algorithm
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Encoding) {
		toSerialize["encoding"] = o.Encoding
	}
	toSerialize["paths"] = o.Paths
	return toSerialize, nil
}

type NullableHashPropertiesConfiguration struct {
	value *HashPropertiesConfiguration
	isSet bool
}

func (v NullableHashPropertiesConfiguration) Get() *HashPropertiesConfiguration {
	return v.value
}

func (v *NullableHashPropertiesConfiguration) Set(val *HashPropertiesConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableHashPropertiesConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableHashPropertiesConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHashPropertiesConfiguration(
	val *HashPropertiesConfiguration,
) *NullableHashPropertiesConfiguration {
	return &NullableHashPropertiesConfiguration{value: val, isSet: true}
}

func (v NullableHashPropertiesConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHashPropertiesConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
