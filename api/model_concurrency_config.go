/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 57.4.0
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the ConcurrencyConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConcurrencyConfig{}

// ConcurrencyConfig struct for ConcurrencyConfig
type ConcurrencyConfig struct {
	Enabled        bool    `json:"enabled"`
	ConcurrencyKey *string `json:"concurrencyKey,omitempty"`
}

// NewConcurrencyConfig instantiates a new ConcurrencyConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConcurrencyConfig(enabled bool) *ConcurrencyConfig {
	this := ConcurrencyConfig{}
	this.Enabled = enabled
	return &this
}

// NewConcurrencyConfigWithDefaults instantiates a new ConcurrencyConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConcurrencyConfigWithDefaults() *ConcurrencyConfig {
	this := ConcurrencyConfig{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *ConcurrencyConfig) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *ConcurrencyConfig) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *ConcurrencyConfig) SetEnabled(v bool) {
	o.Enabled = v
}

// GetConcurrencyKey returns the ConcurrencyKey field value if set, zero value otherwise.
func (o *ConcurrencyConfig) GetConcurrencyKey() string {
	if o == nil || IsNil(o.ConcurrencyKey) {
		var ret string
		return ret
	}
	return *o.ConcurrencyKey
}

// GetConcurrencyKeyOk returns a tuple with the ConcurrencyKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConcurrencyConfig) GetConcurrencyKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ConcurrencyKey) {
		return nil, false
	}
	return o.ConcurrencyKey, true
}

// HasConcurrencyKey returns a boolean if a field has been set.
func (o *ConcurrencyConfig) HasConcurrencyKey() bool {
	if o != nil && !IsNil(o.ConcurrencyKey) {
		return true
	}

	return false
}

// SetConcurrencyKey gets a reference to the given string and assigns it to the ConcurrencyKey field.
func (o *ConcurrencyConfig) SetConcurrencyKey(v string) {
	o.ConcurrencyKey = &v
}

func (o ConcurrencyConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConcurrencyConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	if !IsNil(o.ConcurrencyKey) {
		toSerialize["concurrencyKey"] = o.ConcurrencyKey
	}
	return toSerialize, nil
}

type NullableConcurrencyConfig struct {
	value *ConcurrencyConfig
	isSet bool
}

func (v NullableConcurrencyConfig) Get() *ConcurrencyConfig {
	return v.value
}

func (v *NullableConcurrencyConfig) Set(val *ConcurrencyConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableConcurrencyConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableConcurrencyConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConcurrencyConfig(val *ConcurrencyConfig) *NullableConcurrencyConfig {
	return &NullableConcurrencyConfig{value: val, isSet: true}
}

func (v NullableConcurrencyConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConcurrencyConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
