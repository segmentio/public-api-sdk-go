/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 57.4.0
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// DestinationsInner struct for DestinationsInner
type DestinationsInner struct {
	DestinationState     *DestinationState
	ExitDestinationState *ExitDestinationState
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *DestinationsInner) UnmarshalJSON(data []byte) error {
	var err error

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()

	// try to unmarshal JSON data into DestinationState
	decoder = json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&dst.DestinationState)
	if err == nil {
		jsonDestinationState, _ := json.Marshal(dst.DestinationState)
		if string(jsonDestinationState) == "{}" { // empty struct
			dst.DestinationState = nil
		} else {
			return nil // data stored in dst.DestinationState, return on the first match
		}
	} else {
		dst.DestinationState = nil
	}

	// try to unmarshal JSON data into ExitDestinationState
	decoder = json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&dst.ExitDestinationState)
	if err == nil {
		jsonExitDestinationState, _ := json.Marshal(dst.ExitDestinationState)
		if string(jsonExitDestinationState) == "{}" { // empty struct
			dst.ExitDestinationState = nil
		} else {
			return nil // data stored in dst.ExitDestinationState, return on the first match
		}
	} else {
		dst.ExitDestinationState = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(DestinationsInner)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *DestinationsInner) MarshalJSON() ([]byte, error) {
	if src.DestinationState != nil {
		return json.Marshal(&src.DestinationState)
	}

	if src.ExitDestinationState != nil {
		return json.Marshal(&src.ExitDestinationState)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableDestinationsInner struct {
	value *DestinationsInner
	isSet bool
}

func (v NullableDestinationsInner) Get() *DestinationsInner {
	return v.value
}

func (v *NullableDestinationsInner) Set(val *DestinationsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableDestinationsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableDestinationsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDestinationsInner(val *DestinationsInner) *NullableDestinationsInner {
	return &NullableDestinationsInner{value: val, isSet: true}
}

func (v NullableDestinationsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDestinationsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
