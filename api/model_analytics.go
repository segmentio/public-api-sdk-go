/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 57.4.0
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the Analytics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Analytics{}

// Analytics struct for Analytics
type Analytics struct {
	Total  float32 `json:"total"`
	Unique float32 `json:"unique"`
}

// NewAnalytics instantiates a new Analytics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnalytics(total float32, unique float32) *Analytics {
	this := Analytics{}
	this.Total = total
	this.Unique = unique
	return &this
}

// NewAnalyticsWithDefaults instantiates a new Analytics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnalyticsWithDefaults() *Analytics {
	this := Analytics{}
	return &this
}

// GetTotal returns the Total field value
func (o *Analytics) GetTotal() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *Analytics) GetTotalOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *Analytics) SetTotal(v float32) {
	o.Total = v
}

// GetUnique returns the Unique field value
func (o *Analytics) GetUnique() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Unique
}

// GetUniqueOk returns a tuple with the Unique field value
// and a boolean to check if the value has been set.
func (o *Analytics) GetUniqueOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unique, true
}

// SetUnique sets field value
func (o *Analytics) SetUnique(v float32) {
	o.Unique = v
}

func (o Analytics) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Analytics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["total"] = o.Total
	toSerialize["unique"] = o.Unique
	return toSerialize, nil
}

type NullableAnalytics struct {
	value *Analytics
	isSet bool
}

func (v NullableAnalytics) Get() *Analytics {
	return v.value
}

func (v *NullableAnalytics) Set(val *Analytics) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalytics) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalytics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalytics(val *Analytics) *NullableAnalytics {
	return &NullableAnalytics{value: val, isSet: true}
}

func (v NullableAnalytics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalytics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
