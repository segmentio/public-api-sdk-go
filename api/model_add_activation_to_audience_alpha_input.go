/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 58.12.0
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the AddActivationToAudienceAlphaInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddActivationToAudienceAlphaInput{}

// AddActivationToAudienceAlphaInput Input to create an activation.
type AddActivationToAudienceAlphaInput struct {
	// Version Schema.
	VersionSchema string `json:"versionSchema"`
	// The id of the Workspace the audience exists within.
	WorkspaceId string `json:"workspaceId"`
	// The Destination id.
	DestinationId string `json:"destinationId"`
	// Whether the event emitter should be created in an enabled state.
	Enabled *bool `json:"enabled,omitempty"`
	// Whether the event emitter should be created with the resync option.
	HasEnabledResync *bool `json:"hasEnabledResync,omitempty"`
	// Whether the event emitter should emit events when the profile changes or when any enriched entity values changes. Only valid for identify events.
	EmitEntityContext *string `json:"emitEntityContext,omitempty"`
	// Configuration settings for the event emitter to be created.
	EventEmitter interface{} `json:"eventEmitter"`
	// Subscription info to connect the event emitter to a Destination attached to the audience.
	Subscription interface{} `json:"subscription"`
}

// NewAddActivationToAudienceAlphaInput instantiates a new AddActivationToAudienceAlphaInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddActivationToAudienceAlphaInput(
	versionSchema string,
	workspaceId string,
	destinationId string,
	eventEmitter interface{},
	subscription interface{},
) *AddActivationToAudienceAlphaInput {
	this := AddActivationToAudienceAlphaInput{}
	this.VersionSchema = versionSchema
	this.WorkspaceId = workspaceId
	this.DestinationId = destinationId
	this.EventEmitter = eventEmitter
	this.Subscription = subscription
	return &this
}

// NewAddActivationToAudienceAlphaInputWithDefaults instantiates a new AddActivationToAudienceAlphaInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddActivationToAudienceAlphaInputWithDefaults() *AddActivationToAudienceAlphaInput {
	this := AddActivationToAudienceAlphaInput{}
	return &this
}

// GetVersionSchema returns the VersionSchema field value
func (o *AddActivationToAudienceAlphaInput) GetVersionSchema() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VersionSchema
}

// GetVersionSchemaOk returns a tuple with the VersionSchema field value
// and a boolean to check if the value has been set.
func (o *AddActivationToAudienceAlphaInput) GetVersionSchemaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VersionSchema, true
}

// SetVersionSchema sets field value
func (o *AddActivationToAudienceAlphaInput) SetVersionSchema(v string) {
	o.VersionSchema = v
}

// GetWorkspaceId returns the WorkspaceId field value
func (o *AddActivationToAudienceAlphaInput) GetWorkspaceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WorkspaceId
}

// GetWorkspaceIdOk returns a tuple with the WorkspaceId field value
// and a boolean to check if the value has been set.
func (o *AddActivationToAudienceAlphaInput) GetWorkspaceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WorkspaceId, true
}

// SetWorkspaceId sets field value
func (o *AddActivationToAudienceAlphaInput) SetWorkspaceId(v string) {
	o.WorkspaceId = v
}

// GetDestinationId returns the DestinationId field value
func (o *AddActivationToAudienceAlphaInput) GetDestinationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestinationId
}

// GetDestinationIdOk returns a tuple with the DestinationId field value
// and a boolean to check if the value has been set.
func (o *AddActivationToAudienceAlphaInput) GetDestinationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationId, true
}

// SetDestinationId sets field value
func (o *AddActivationToAudienceAlphaInput) SetDestinationId(v string) {
	o.DestinationId = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *AddActivationToAudienceAlphaInput) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddActivationToAudienceAlphaInput) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *AddActivationToAudienceAlphaInput) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *AddActivationToAudienceAlphaInput) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetHasEnabledResync returns the HasEnabledResync field value if set, zero value otherwise.
func (o *AddActivationToAudienceAlphaInput) GetHasEnabledResync() bool {
	if o == nil || IsNil(o.HasEnabledResync) {
		var ret bool
		return ret
	}
	return *o.HasEnabledResync
}

// GetHasEnabledResyncOk returns a tuple with the HasEnabledResync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddActivationToAudienceAlphaInput) GetHasEnabledResyncOk() (*bool, bool) {
	if o == nil || IsNil(o.HasEnabledResync) {
		return nil, false
	}
	return o.HasEnabledResync, true
}

// HasHasEnabledResync returns a boolean if a field has been set.
func (o *AddActivationToAudienceAlphaInput) HasHasEnabledResync() bool {
	if o != nil && !IsNil(o.HasEnabledResync) {
		return true
	}

	return false
}

// SetHasEnabledResync gets a reference to the given bool and assigns it to the HasEnabledResync field.
func (o *AddActivationToAudienceAlphaInput) SetHasEnabledResync(v bool) {
	o.HasEnabledResync = &v
}

// GetEmitEntityContext returns the EmitEntityContext field value if set, zero value otherwise.
func (o *AddActivationToAudienceAlphaInput) GetEmitEntityContext() string {
	if o == nil || IsNil(o.EmitEntityContext) {
		var ret string
		return ret
	}
	return *o.EmitEntityContext
}

// GetEmitEntityContextOk returns a tuple with the EmitEntityContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddActivationToAudienceAlphaInput) GetEmitEntityContextOk() (*string, bool) {
	if o == nil || IsNil(o.EmitEntityContext) {
		return nil, false
	}
	return o.EmitEntityContext, true
}

// HasEmitEntityContext returns a boolean if a field has been set.
func (o *AddActivationToAudienceAlphaInput) HasEmitEntityContext() bool {
	if o != nil && !IsNil(o.EmitEntityContext) {
		return true
	}

	return false
}

// SetEmitEntityContext gets a reference to the given string and assigns it to the EmitEntityContext field.
func (o *AddActivationToAudienceAlphaInput) SetEmitEntityContext(v string) {
	o.EmitEntityContext = &v
}

// GetEventEmitter returns the EventEmitter field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *AddActivationToAudienceAlphaInput) GetEventEmitter() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.EventEmitter
}

// GetEventEmitterOk returns a tuple with the EventEmitter field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddActivationToAudienceAlphaInput) GetEventEmitterOk() (*interface{}, bool) {
	if o == nil || IsNil(o.EventEmitter) {
		return nil, false
	}
	return &o.EventEmitter, true
}

// SetEventEmitter sets field value
func (o *AddActivationToAudienceAlphaInput) SetEventEmitter(v interface{}) {
	o.EventEmitter = v
}

// GetSubscription returns the Subscription field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *AddActivationToAudienceAlphaInput) GetSubscription() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Subscription
}

// GetSubscriptionOk returns a tuple with the Subscription field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddActivationToAudienceAlphaInput) GetSubscriptionOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Subscription) {
		return nil, false
	}
	return &o.Subscription, true
}

// SetSubscription sets field value
func (o *AddActivationToAudienceAlphaInput) SetSubscription(v interface{}) {
	o.Subscription = v
}

func (o AddActivationToAudienceAlphaInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddActivationToAudienceAlphaInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["versionSchema"] = o.VersionSchema
	toSerialize["workspaceId"] = o.WorkspaceId
	toSerialize["destinationId"] = o.DestinationId
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.HasEnabledResync) {
		toSerialize["hasEnabledResync"] = o.HasEnabledResync
	}
	if !IsNil(o.EmitEntityContext) {
		toSerialize["emitEntityContext"] = o.EmitEntityContext
	}
	if o.EventEmitter != nil {
		toSerialize["eventEmitter"] = o.EventEmitter
	}
	if o.Subscription != nil {
		toSerialize["subscription"] = o.Subscription
	}
	return toSerialize, nil
}

type NullableAddActivationToAudienceAlphaInput struct {
	value *AddActivationToAudienceAlphaInput
	isSet bool
}

func (v NullableAddActivationToAudienceAlphaInput) Get() *AddActivationToAudienceAlphaInput {
	return v.value
}

func (v *NullableAddActivationToAudienceAlphaInput) Set(val *AddActivationToAudienceAlphaInput) {
	v.value = val
	v.isSet = true
}

func (v NullableAddActivationToAudienceAlphaInput) IsSet() bool {
	return v.isSet
}

func (v *NullableAddActivationToAudienceAlphaInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddActivationToAudienceAlphaInput(
	val *AddActivationToAudienceAlphaInput,
) *NullableAddActivationToAudienceAlphaInput {
	return &NullableAddActivationToAudienceAlphaInput{value: val, isSet: true}
}

func (v NullableAddActivationToAudienceAlphaInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddActivationToAudienceAlphaInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
