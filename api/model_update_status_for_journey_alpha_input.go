/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 57.4.0
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the UpdateStatusForJourneyAlphaInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateStatusForJourneyAlphaInput{}

// UpdateStatusForJourneyAlphaInput Update journey status input.
type UpdateStatusForJourneyAlphaInput struct {
	// The journey version.
	Version float32 `json:"version"`
	// The action to perform for the journey.
	Action string `json:"action"`
}

// NewUpdateStatusForJourneyAlphaInput instantiates a new UpdateStatusForJourneyAlphaInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateStatusForJourneyAlphaInput(
	version float32,
	action string,
) *UpdateStatusForJourneyAlphaInput {
	this := UpdateStatusForJourneyAlphaInput{}
	this.Version = version
	this.Action = action
	return &this
}

// NewUpdateStatusForJourneyAlphaInputWithDefaults instantiates a new UpdateStatusForJourneyAlphaInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateStatusForJourneyAlphaInputWithDefaults() *UpdateStatusForJourneyAlphaInput {
	this := UpdateStatusForJourneyAlphaInput{}
	return &this
}

// GetVersion returns the Version field value
func (o *UpdateStatusForJourneyAlphaInput) GetVersion() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *UpdateStatusForJourneyAlphaInput) GetVersionOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *UpdateStatusForJourneyAlphaInput) SetVersion(v float32) {
	o.Version = v
}

// GetAction returns the Action field value
func (o *UpdateStatusForJourneyAlphaInput) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *UpdateStatusForJourneyAlphaInput) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *UpdateStatusForJourneyAlphaInput) SetAction(v string) {
	o.Action = v
}

func (o UpdateStatusForJourneyAlphaInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateStatusForJourneyAlphaInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["version"] = o.Version
	toSerialize["action"] = o.Action
	return toSerialize, nil
}

type NullableUpdateStatusForJourneyAlphaInput struct {
	value *UpdateStatusForJourneyAlphaInput
	isSet bool
}

func (v NullableUpdateStatusForJourneyAlphaInput) Get() *UpdateStatusForJourneyAlphaInput {
	return v.value
}

func (v *NullableUpdateStatusForJourneyAlphaInput) Set(val *UpdateStatusForJourneyAlphaInput) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateStatusForJourneyAlphaInput) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateStatusForJourneyAlphaInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateStatusForJourneyAlphaInput(
	val *UpdateStatusForJourneyAlphaInput,
) *NullableUpdateStatusForJourneyAlphaInput {
	return &NullableUpdateStatusForJourneyAlphaInput{value: val, isSet: true}
}

func (v NullableUpdateStatusForJourneyAlphaInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateStatusForJourneyAlphaInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
