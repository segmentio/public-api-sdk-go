/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 58.7.0
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the AudiencePreviewOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AudiencePreviewOptions{}

// AudiencePreviewOptions Options which should be applied when segmenting audience previews.
type AudiencePreviewOptions struct {
	// The set of profile external identifiers being used to determine audience preview membership. Profiles will only be considered for audience preview membership if the profile has at least one external id whose key matches a value in this set. If unspecified, a default set of external identifiers will be used: `['user_id', 'email', 'android.idfa', 'ios.idfa']`.
	FilterByExternalIds []string `json:"filterByExternalIds,omitempty"`
	// If specified, the value of this field indicates the number of days (specified from the date the audience preview was created) that event data will be included from when determining audience preview membership. If unspecified, event data will not be included when determining audience preview membership.
	BackfillEventDataDays *float32 `json:"backfillEventDataDays,omitempty"`
}

// NewAudiencePreviewOptions instantiates a new AudiencePreviewOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAudiencePreviewOptions() *AudiencePreviewOptions {
	this := AudiencePreviewOptions{}
	return &this
}

// NewAudiencePreviewOptionsWithDefaults instantiates a new AudiencePreviewOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAudiencePreviewOptionsWithDefaults() *AudiencePreviewOptions {
	this := AudiencePreviewOptions{}
	return &this
}

// GetFilterByExternalIds returns the FilterByExternalIds field value if set, zero value otherwise.
func (o *AudiencePreviewOptions) GetFilterByExternalIds() []string {
	if o == nil || IsNil(o.FilterByExternalIds) {
		var ret []string
		return ret
	}
	return o.FilterByExternalIds
}

// GetFilterByExternalIdsOk returns a tuple with the FilterByExternalIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudiencePreviewOptions) GetFilterByExternalIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.FilterByExternalIds) {
		return nil, false
	}
	return o.FilterByExternalIds, true
}

// HasFilterByExternalIds returns a boolean if a field has been set.
func (o *AudiencePreviewOptions) HasFilterByExternalIds() bool {
	if o != nil && !IsNil(o.FilterByExternalIds) {
		return true
	}

	return false
}

// SetFilterByExternalIds gets a reference to the given []string and assigns it to the FilterByExternalIds field.
func (o *AudiencePreviewOptions) SetFilterByExternalIds(v []string) {
	o.FilterByExternalIds = v
}

// GetBackfillEventDataDays returns the BackfillEventDataDays field value if set, zero value otherwise.
func (o *AudiencePreviewOptions) GetBackfillEventDataDays() float32 {
	if o == nil || IsNil(o.BackfillEventDataDays) {
		var ret float32
		return ret
	}
	return *o.BackfillEventDataDays
}

// GetBackfillEventDataDaysOk returns a tuple with the BackfillEventDataDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudiencePreviewOptions) GetBackfillEventDataDaysOk() (*float32, bool) {
	if o == nil || IsNil(o.BackfillEventDataDays) {
		return nil, false
	}
	return o.BackfillEventDataDays, true
}

// HasBackfillEventDataDays returns a boolean if a field has been set.
func (o *AudiencePreviewOptions) HasBackfillEventDataDays() bool {
	if o != nil && !IsNil(o.BackfillEventDataDays) {
		return true
	}

	return false
}

// SetBackfillEventDataDays gets a reference to the given float32 and assigns it to the BackfillEventDataDays field.
func (o *AudiencePreviewOptions) SetBackfillEventDataDays(v float32) {
	o.BackfillEventDataDays = &v
}

func (o AudiencePreviewOptions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AudiencePreviewOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FilterByExternalIds) {
		toSerialize["filterByExternalIds"] = o.FilterByExternalIds
	}
	if !IsNil(o.BackfillEventDataDays) {
		toSerialize["backfillEventDataDays"] = o.BackfillEventDataDays
	}
	return toSerialize, nil
}

type NullableAudiencePreviewOptions struct {
	value *AudiencePreviewOptions
	isSet bool
}

func (v NullableAudiencePreviewOptions) Get() *AudiencePreviewOptions {
	return v.value
}

func (v *NullableAudiencePreviewOptions) Set(val *AudiencePreviewOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableAudiencePreviewOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableAudiencePreviewOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAudiencePreviewOptions(
	val *AudiencePreviewOptions,
) *NullableAudiencePreviewOptions {
	return &NullableAudiencePreviewOptions{value: val, isSet: true}
}

func (v NullableAudiencePreviewOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAudiencePreviewOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
