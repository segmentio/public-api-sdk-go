/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 58.1.1
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the ConditionBranch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConditionBranch{}

// ConditionBranch struct for ConditionBranch
type ConditionBranch struct {
	Type      string `json:"type"`
	Condition string `json:"condition"`
	Next      string `json:"next"`
}

// NewConditionBranch instantiates a new ConditionBranch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditionBranch(type_ string, condition string, next string) *ConditionBranch {
	this := ConditionBranch{}
	this.Type = type_
	this.Condition = condition
	this.Next = next
	return &this
}

// NewConditionBranchWithDefaults instantiates a new ConditionBranch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionBranchWithDefaults() *ConditionBranch {
	this := ConditionBranch{}
	return &this
}

// GetType returns the Type field value
func (o *ConditionBranch) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ConditionBranch) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ConditionBranch) SetType(v string) {
	o.Type = v
}

// GetCondition returns the Condition field value
func (o *ConditionBranch) GetCondition() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Condition
}

// GetConditionOk returns a tuple with the Condition field value
// and a boolean to check if the value has been set.
func (o *ConditionBranch) GetConditionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Condition, true
}

// SetCondition sets field value
func (o *ConditionBranch) SetCondition(v string) {
	o.Condition = v
}

// GetNext returns the Next field value
func (o *ConditionBranch) GetNext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Next
}

// GetNextOk returns a tuple with the Next field value
// and a boolean to check if the value has been set.
func (o *ConditionBranch) GetNextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Next, true
}

// SetNext sets field value
func (o *ConditionBranch) SetNext(v string) {
	o.Next = v
}

func (o ConditionBranch) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConditionBranch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["condition"] = o.Condition
	toSerialize["next"] = o.Next
	return toSerialize, nil
}

type NullableConditionBranch struct {
	value *ConditionBranch
	isSet bool
}

func (v NullableConditionBranch) Get() *ConditionBranch {
	return v.value
}

func (v *NullableConditionBranch) Set(val *ConditionBranch) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionBranch) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionBranch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionBranch(val *ConditionBranch) *NullableConditionBranch {
	return &NullableConditionBranch{value: val, isSet: true}
}

func (v NullableConditionBranch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionBranch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
