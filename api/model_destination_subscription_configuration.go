/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 61.0.2
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the DestinationSubscriptionConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DestinationSubscriptionConfiguration{}

// DestinationSubscriptionConfiguration Destination Subscription Configuration.
type DestinationSubscriptionConfiguration struct {
	// The action id to instantiate.
	ActionId string `json:"actionId"`
	// Represents settings used to configure an action subscription.
	Settings map[string]interface{} `json:"settings,omitempty"`
}

// NewDestinationSubscriptionConfiguration instantiates a new DestinationSubscriptionConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDestinationSubscriptionConfiguration(
	actionId string,
) *DestinationSubscriptionConfiguration {
	this := DestinationSubscriptionConfiguration{}
	this.ActionId = actionId
	return &this
}

// NewDestinationSubscriptionConfigurationWithDefaults instantiates a new DestinationSubscriptionConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDestinationSubscriptionConfigurationWithDefaults() *DestinationSubscriptionConfiguration {
	this := DestinationSubscriptionConfiguration{}
	return &this
}

// GetActionId returns the ActionId field value
func (o *DestinationSubscriptionConfiguration) GetActionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ActionId
}

// GetActionIdOk returns a tuple with the ActionId field value
// and a boolean to check if the value has been set.
func (o *DestinationSubscriptionConfiguration) GetActionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActionId, true
}

// SetActionId sets field value
func (o *DestinationSubscriptionConfiguration) SetActionId(v string) {
	o.ActionId = v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *DestinationSubscriptionConfiguration) GetSettings() map[string]interface{} {
	if o == nil || IsNil(o.Settings) {
		var ret map[string]interface{}
		return ret
	}
	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationSubscriptionConfiguration) GetSettingsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Settings) {
		return map[string]interface{}{}, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *DestinationSubscriptionConfiguration) HasSettings() bool {
	if o != nil && !IsNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given map[string]interface{} and assigns it to the Settings field.
func (o *DestinationSubscriptionConfiguration) SetSettings(v map[string]interface{}) {
	o.Settings = v
}

func (o DestinationSubscriptionConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DestinationSubscriptionConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["actionId"] = o.ActionId
	if !IsNil(o.Settings) {
		toSerialize["settings"] = o.Settings
	}
	return toSerialize, nil
}

type NullableDestinationSubscriptionConfiguration struct {
	value *DestinationSubscriptionConfiguration
	isSet bool
}

func (v NullableDestinationSubscriptionConfiguration) Get() *DestinationSubscriptionConfiguration {
	return v.value
}

func (v *NullableDestinationSubscriptionConfiguration) Set(
	val *DestinationSubscriptionConfiguration,
) {
	v.value = val
	v.isSet = true
}

func (v NullableDestinationSubscriptionConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableDestinationSubscriptionConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDestinationSubscriptionConfiguration(
	val *DestinationSubscriptionConfiguration,
) *NullableDestinationSubscriptionConfiguration {
	return &NullableDestinationSubscriptionConfiguration{value: val, isSet: true}
}

func (v NullableDestinationSubscriptionConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDestinationSubscriptionConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
