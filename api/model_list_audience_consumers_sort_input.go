/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 58.9.0
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the ListAudienceConsumersSortInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListAudienceConsumersSortInput{}

// ListAudienceConsumersSortInput Sort criteria input for list audience consumers.
type ListAudienceConsumersSortInput struct {
	// Field to sort by.
	Field string `json:"field"`
	// Sort direction (ascending or descending).
	Direction string `json:"direction"`
}

// NewListAudienceConsumersSortInput instantiates a new ListAudienceConsumersSortInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListAudienceConsumersSortInput(
	field string,
	direction string,
) *ListAudienceConsumersSortInput {
	this := ListAudienceConsumersSortInput{}
	this.Field = field
	this.Direction = direction
	return &this
}

// NewListAudienceConsumersSortInputWithDefaults instantiates a new ListAudienceConsumersSortInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListAudienceConsumersSortInputWithDefaults() *ListAudienceConsumersSortInput {
	this := ListAudienceConsumersSortInput{}
	return &this
}

// GetField returns the Field field value
func (o *ListAudienceConsumersSortInput) GetField() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *ListAudienceConsumersSortInput) GetFieldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *ListAudienceConsumersSortInput) SetField(v string) {
	o.Field = v
}

// GetDirection returns the Direction field value
func (o *ListAudienceConsumersSortInput) GetDirection() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value
// and a boolean to check if the value has been set.
func (o *ListAudienceConsumersSortInput) GetDirectionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Direction, true
}

// SetDirection sets field value
func (o *ListAudienceConsumersSortInput) SetDirection(v string) {
	o.Direction = v
}

func (o ListAudienceConsumersSortInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListAudienceConsumersSortInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["field"] = o.Field
	toSerialize["direction"] = o.Direction
	return toSerialize, nil
}

type NullableListAudienceConsumersSortInput struct {
	value *ListAudienceConsumersSortInput
	isSet bool
}

func (v NullableListAudienceConsumersSortInput) Get() *ListAudienceConsumersSortInput {
	return v.value
}

func (v *NullableListAudienceConsumersSortInput) Set(val *ListAudienceConsumersSortInput) {
	v.value = val
	v.isSet = true
}

func (v NullableListAudienceConsumersSortInput) IsSet() bool {
	return v.isSet
}

func (v *NullableListAudienceConsumersSortInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListAudienceConsumersSortInput(
	val *ListAudienceConsumersSortInput,
) *NullableListAudienceConsumersSortInput {
	return &NullableListAudienceConsumersSortInput{value: val, isSet: true}
}

func (v NullableListAudienceConsumersSortInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListAudienceConsumersSortInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
