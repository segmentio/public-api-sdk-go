/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 61.0.0
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the AddDestinationToAudienceAlphaInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddDestinationToAudienceAlphaInput{}

// AddDestinationToAudienceAlphaInput Input to Add a Destination into an Audience.
type AddDestinationToAudienceAlphaInput struct {
	Destination DestinationInput `json:"destination"`
	// The identifier sync configuration input.
	IdSyncConfiguration map[string]interface{} `json:"idSyncConfiguration,omitempty"`
	// The settings that a Destination requires to create audiences on a third-party platform. These settings are Destination-specific and thus are best defined as unknown.
	ConnectionSettings interface{} `json:"connectionSettings,omitempty"`
}

// NewAddDestinationToAudienceAlphaInput instantiates a new AddDestinationToAudienceAlphaInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddDestinationToAudienceAlphaInput(
	destination DestinationInput,
) *AddDestinationToAudienceAlphaInput {
	this := AddDestinationToAudienceAlphaInput{}
	this.Destination = destination
	return &this
}

// NewAddDestinationToAudienceAlphaInputWithDefaults instantiates a new AddDestinationToAudienceAlphaInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddDestinationToAudienceAlphaInputWithDefaults() *AddDestinationToAudienceAlphaInput {
	this := AddDestinationToAudienceAlphaInput{}
	return &this
}

// GetDestination returns the Destination field value
func (o *AddDestinationToAudienceAlphaInput) GetDestination() DestinationInput {
	if o == nil {
		var ret DestinationInput
		return ret
	}

	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value
// and a boolean to check if the value has been set.
func (o *AddDestinationToAudienceAlphaInput) GetDestinationOk() (*DestinationInput, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Destination, true
}

// SetDestination sets field value
func (o *AddDestinationToAudienceAlphaInput) SetDestination(v DestinationInput) {
	o.Destination = v
}

// GetIdSyncConfiguration returns the IdSyncConfiguration field value if set, zero value otherwise.
func (o *AddDestinationToAudienceAlphaInput) GetIdSyncConfiguration() map[string]interface{} {
	if o == nil || IsNil(o.IdSyncConfiguration) {
		var ret map[string]interface{}
		return ret
	}
	return o.IdSyncConfiguration
}

// GetIdSyncConfigurationOk returns a tuple with the IdSyncConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDestinationToAudienceAlphaInput) GetIdSyncConfigurationOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.IdSyncConfiguration) {
		return map[string]interface{}{}, false
	}
	return o.IdSyncConfiguration, true
}

// HasIdSyncConfiguration returns a boolean if a field has been set.
func (o *AddDestinationToAudienceAlphaInput) HasIdSyncConfiguration() bool {
	if o != nil && !IsNil(o.IdSyncConfiguration) {
		return true
	}

	return false
}

// SetIdSyncConfiguration gets a reference to the given map[string]interface{} and assigns it to the IdSyncConfiguration field.
func (o *AddDestinationToAudienceAlphaInput) SetIdSyncConfiguration(v map[string]interface{}) {
	o.IdSyncConfiguration = v
}

// GetConnectionSettings returns the ConnectionSettings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddDestinationToAudienceAlphaInput) GetConnectionSettings() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ConnectionSettings
}

// GetConnectionSettingsOk returns a tuple with the ConnectionSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddDestinationToAudienceAlphaInput) GetConnectionSettingsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ConnectionSettings) {
		return nil, false
	}
	return &o.ConnectionSettings, true
}

// HasConnectionSettings returns a boolean if a field has been set.
func (o *AddDestinationToAudienceAlphaInput) HasConnectionSettings() bool {
	if o != nil && IsNil(o.ConnectionSettings) {
		return true
	}

	return false
}

// SetConnectionSettings gets a reference to the given interface{} and assigns it to the ConnectionSettings field.
func (o *AddDestinationToAudienceAlphaInput) SetConnectionSettings(v interface{}) {
	o.ConnectionSettings = v
}

func (o AddDestinationToAudienceAlphaInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddDestinationToAudienceAlphaInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["destination"] = o.Destination
	if !IsNil(o.IdSyncConfiguration) {
		toSerialize["idSyncConfiguration"] = o.IdSyncConfiguration
	}
	if o.ConnectionSettings != nil {
		toSerialize["connectionSettings"] = o.ConnectionSettings
	}
	return toSerialize, nil
}

type NullableAddDestinationToAudienceAlphaInput struct {
	value *AddDestinationToAudienceAlphaInput
	isSet bool
}

func (v NullableAddDestinationToAudienceAlphaInput) Get() *AddDestinationToAudienceAlphaInput {
	return v.value
}

func (v *NullableAddDestinationToAudienceAlphaInput) Set(val *AddDestinationToAudienceAlphaInput) {
	v.value = val
	v.isSet = true
}

func (v NullableAddDestinationToAudienceAlphaInput) IsSet() bool {
	return v.isSet
}

func (v *NullableAddDestinationToAudienceAlphaInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddDestinationToAudienceAlphaInput(
	val *AddDestinationToAudienceAlphaInput,
) *NullableAddDestinationToAudienceAlphaInput {
	return &NullableAddDestinationToAudienceAlphaInput{value: val, isSet: true}
}

func (v NullableAddDestinationToAudienceAlphaInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddDestinationToAudienceAlphaInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
