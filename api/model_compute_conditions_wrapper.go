/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 59.1.0
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the ComputeConditionsWrapper type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComputeConditionsWrapper{}

// ComputeConditionsWrapper Compute conditions wrapper for beta API.
type ComputeConditionsWrapper struct {
	// The query format.
	Format string `json:"format"`
	// The query language string or AST object defining the audience segmentation criteria.
	Conditions map[string]interface{} `json:"conditions"`
}

// NewComputeConditionsWrapper instantiates a new ComputeConditionsWrapper object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputeConditionsWrapper(
	format string,
	conditions map[string]interface{},
) *ComputeConditionsWrapper {
	this := ComputeConditionsWrapper{}
	this.Format = format
	this.Conditions = conditions
	return &this
}

// NewComputeConditionsWrapperWithDefaults instantiates a new ComputeConditionsWrapper object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputeConditionsWrapperWithDefaults() *ComputeConditionsWrapper {
	this := ComputeConditionsWrapper{}
	return &this
}

// GetFormat returns the Format field value
func (o *ComputeConditionsWrapper) GetFormat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Format
}

// GetFormatOk returns a tuple with the Format field value
// and a boolean to check if the value has been set.
func (o *ComputeConditionsWrapper) GetFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Format, true
}

// SetFormat sets field value
func (o *ComputeConditionsWrapper) SetFormat(v string) {
	o.Format = v
}

// GetConditions returns the Conditions field value
// If the value is explicit nil, the zero value for map[string]interface{} will be returned
func (o *ComputeConditionsWrapper) GetConditions() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComputeConditionsWrapper) GetConditionsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Conditions) {
		return map[string]interface{}{}, false
	}
	return o.Conditions, true
}

// SetConditions sets field value
func (o *ComputeConditionsWrapper) SetConditions(v map[string]interface{}) {
	o.Conditions = v
}

func (o ComputeConditionsWrapper) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComputeConditionsWrapper) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["format"] = o.Format
	if o.Conditions != nil {
		toSerialize["conditions"] = o.Conditions
	}
	return toSerialize, nil
}

type NullableComputeConditionsWrapper struct {
	value *ComputeConditionsWrapper
	isSet bool
}

func (v NullableComputeConditionsWrapper) Get() *ComputeConditionsWrapper {
	return v.value
}

func (v *NullableComputeConditionsWrapper) Set(val *ComputeConditionsWrapper) {
	v.value = val
	v.isSet = true
}

func (v NullableComputeConditionsWrapper) IsSet() bool {
	return v.isSet
}

func (v *NullableComputeConditionsWrapper) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputeConditionsWrapper(
	val *ComputeConditionsWrapper,
) *NullableComputeConditionsWrapper {
	return &NullableComputeConditionsWrapper{value: val, isSet: true}
}

func (v NullableComputeConditionsWrapper) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputeConditionsWrapper) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
