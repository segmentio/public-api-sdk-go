/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 57.4.0
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the JourneyVersionOutput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JourneyVersionOutput{}

// JourneyVersionOutput struct for JourneyVersionOutput
type JourneyVersionOutput struct {
	Id         string            `json:"id"`
	Version    float32           `json:"version"`
	Status     string            `json:"status"`
	Definition JourneyDefinition `json:"definition"`
	CreatedAt  string            `json:"createdAt"`
	UpdatedAt  *string           `json:"updatedAt,omitempty"`
	CreatedBy  string            `json:"createdBy"`
	UpdatedBy  *string           `json:"updatedBy,omitempty"`
}

// NewJourneyVersionOutput instantiates a new JourneyVersionOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJourneyVersionOutput(
	id string,
	version float32,
	status string,
	definition JourneyDefinition,
	createdAt string,
	createdBy string,
) *JourneyVersionOutput {
	this := JourneyVersionOutput{}
	this.Id = id
	this.Version = version
	this.Status = status
	this.Definition = definition
	this.CreatedAt = createdAt
	this.CreatedBy = createdBy
	return &this
}

// NewJourneyVersionOutputWithDefaults instantiates a new JourneyVersionOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJourneyVersionOutputWithDefaults() *JourneyVersionOutput {
	this := JourneyVersionOutput{}
	return &this
}

// GetId returns the Id field value
func (o *JourneyVersionOutput) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *JourneyVersionOutput) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *JourneyVersionOutput) SetId(v string) {
	o.Id = v
}

// GetVersion returns the Version field value
func (o *JourneyVersionOutput) GetVersion() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *JourneyVersionOutput) GetVersionOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *JourneyVersionOutput) SetVersion(v float32) {
	o.Version = v
}

// GetStatus returns the Status field value
func (o *JourneyVersionOutput) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *JourneyVersionOutput) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *JourneyVersionOutput) SetStatus(v string) {
	o.Status = v
}

// GetDefinition returns the Definition field value
func (o *JourneyVersionOutput) GetDefinition() JourneyDefinition {
	if o == nil {
		var ret JourneyDefinition
		return ret
	}

	return o.Definition
}

// GetDefinitionOk returns a tuple with the Definition field value
// and a boolean to check if the value has been set.
func (o *JourneyVersionOutput) GetDefinitionOk() (*JourneyDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Definition, true
}

// SetDefinition sets field value
func (o *JourneyVersionOutput) SetDefinition(v JourneyDefinition) {
	o.Definition = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *JourneyVersionOutput) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *JourneyVersionOutput) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *JourneyVersionOutput) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *JourneyVersionOutput) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JourneyVersionOutput) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *JourneyVersionOutput) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *JourneyVersionOutput) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetCreatedBy returns the CreatedBy field value
func (o *JourneyVersionOutput) GetCreatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *JourneyVersionOutput) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *JourneyVersionOutput) SetCreatedBy(v string) {
	o.CreatedBy = v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *JourneyVersionOutput) GetUpdatedBy() string {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret string
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JourneyVersionOutput) GetUpdatedByOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *JourneyVersionOutput) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given string and assigns it to the UpdatedBy field.
func (o *JourneyVersionOutput) SetUpdatedBy(v string) {
	o.UpdatedBy = &v
}

func (o JourneyVersionOutput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JourneyVersionOutput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["version"] = o.Version
	toSerialize["status"] = o.Status
	toSerialize["definition"] = o.Definition
	toSerialize["createdAt"] = o.CreatedAt
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	toSerialize["createdBy"] = o.CreatedBy
	if !IsNil(o.UpdatedBy) {
		toSerialize["updatedBy"] = o.UpdatedBy
	}
	return toSerialize, nil
}

type NullableJourneyVersionOutput struct {
	value *JourneyVersionOutput
	isSet bool
}

func (v NullableJourneyVersionOutput) Get() *JourneyVersionOutput {
	return v.value
}

func (v *NullableJourneyVersionOutput) Set(val *JourneyVersionOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableJourneyVersionOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableJourneyVersionOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJourneyVersionOutput(val *JourneyVersionOutput) *NullableJourneyVersionOutput {
	return &NullableJourneyVersionOutput{value: val, isSet: true}
}

func (v NullableJourneyVersionOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJourneyVersionOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
