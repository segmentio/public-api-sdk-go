/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 58.1.1
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// TransitionsInner1 struct for TransitionsInner1
type TransitionsInner1 struct {
	ConditionBranch *ConditionBranch
	DefaultBranch   *DefaultBranch
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *TransitionsInner1) UnmarshalJSON(data []byte) error {
	var err error

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()

	// try to unmarshal JSON data into ConditionBranch
	decoder = json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&dst.ConditionBranch)
	if err == nil {
		jsonConditionBranch, _ := json.Marshal(dst.ConditionBranch)
		if string(jsonConditionBranch) == "{}" { // empty struct
			dst.ConditionBranch = nil
		} else {
			return nil // data stored in dst.ConditionBranch, return on the first match
		}
	} else {
		dst.ConditionBranch = nil
	}

	// try to unmarshal JSON data into DefaultBranch
	decoder = json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&dst.DefaultBranch)
	if err == nil {
		jsonDefaultBranch, _ := json.Marshal(dst.DefaultBranch)
		if string(jsonDefaultBranch) == "{}" { // empty struct
			dst.DefaultBranch = nil
		} else {
			return nil // data stored in dst.DefaultBranch, return on the first match
		}
	} else {
		dst.DefaultBranch = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(TransitionsInner1)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *TransitionsInner1) MarshalJSON() ([]byte, error) {
	if src.ConditionBranch != nil {
		return json.Marshal(&src.ConditionBranch)
	}

	if src.DefaultBranch != nil {
		return json.Marshal(&src.DefaultBranch)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableTransitionsInner1 struct {
	value *TransitionsInner1
	isSet bool
}

func (v NullableTransitionsInner1) Get() *TransitionsInner1 {
	return v.value
}

func (v *NullableTransitionsInner1) Set(val *TransitionsInner1) {
	v.value = val
	v.isSet = true
}

func (v NullableTransitionsInner1) IsSet() bool {
	return v.isSet
}

func (v *NullableTransitionsInner1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransitionsInner1(val *TransitionsInner1) *NullableTransitionsInner1 {
	return &NullableTransitionsInner1{value: val, isSet: true}
}

func (v NullableTransitionsInner1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransitionsInner1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
