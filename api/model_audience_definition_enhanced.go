/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 59.1.0
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the AudienceDefinitionEnhanced type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AudienceDefinitionEnhanced{}

// AudienceDefinitionEnhanced Enhanced audience definition that supports both AST and CQL formats.
type AudienceDefinitionEnhanced struct {
	// The underlying data type being segmented for this audience.  Possible values: users, accounts.
	Type *string `json:"type,omitempty"`
	// The target entity slug.
	TargetEntity *string `json:"targetEntity,omitempty"`
	// Array of conditions in different formats (AST, CQL).
	Conditions []AudienceConditionsWrapper `json:"conditions,omitempty"`
	// The query language string defining the audience segmentation criteria (CQL format). This is maintained for backward compatibility.  For guidance on using the query language, see the [Segment documentation site](https://segment.com/docs/api/public-api/query-language).
	Query string `json:"query"`
}

// NewAudienceDefinitionEnhanced instantiates a new AudienceDefinitionEnhanced object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAudienceDefinitionEnhanced(query string) *AudienceDefinitionEnhanced {
	this := AudienceDefinitionEnhanced{}
	this.Query = query
	return &this
}

// NewAudienceDefinitionEnhancedWithDefaults instantiates a new AudienceDefinitionEnhanced object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAudienceDefinitionEnhancedWithDefaults() *AudienceDefinitionEnhanced {
	this := AudienceDefinitionEnhanced{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AudienceDefinitionEnhanced) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceDefinitionEnhanced) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AudienceDefinitionEnhanced) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AudienceDefinitionEnhanced) SetType(v string) {
	o.Type = &v
}

// GetTargetEntity returns the TargetEntity field value if set, zero value otherwise.
func (o *AudienceDefinitionEnhanced) GetTargetEntity() string {
	if o == nil || IsNil(o.TargetEntity) {
		var ret string
		return ret
	}
	return *o.TargetEntity
}

// GetTargetEntityOk returns a tuple with the TargetEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceDefinitionEnhanced) GetTargetEntityOk() (*string, bool) {
	if o == nil || IsNil(o.TargetEntity) {
		return nil, false
	}
	return o.TargetEntity, true
}

// HasTargetEntity returns a boolean if a field has been set.
func (o *AudienceDefinitionEnhanced) HasTargetEntity() bool {
	if o != nil && !IsNil(o.TargetEntity) {
		return true
	}

	return false
}

// SetTargetEntity gets a reference to the given string and assigns it to the TargetEntity field.
func (o *AudienceDefinitionEnhanced) SetTargetEntity(v string) {
	o.TargetEntity = &v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *AudienceDefinitionEnhanced) GetConditions() []AudienceConditionsWrapper {
	if o == nil || IsNil(o.Conditions) {
		var ret []AudienceConditionsWrapper
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceDefinitionEnhanced) GetConditionsOk() ([]AudienceConditionsWrapper, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *AudienceDefinitionEnhanced) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []AudienceConditionsWrapper and assigns it to the Conditions field.
func (o *AudienceDefinitionEnhanced) SetConditions(v []AudienceConditionsWrapper) {
	o.Conditions = v
}

// GetQuery returns the Query field value
func (o *AudienceDefinitionEnhanced) GetQuery() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *AudienceDefinitionEnhanced) GetQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *AudienceDefinitionEnhanced) SetQuery(v string) {
	o.Query = v
}

func (o AudienceDefinitionEnhanced) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AudienceDefinitionEnhanced) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.TargetEntity) {
		toSerialize["targetEntity"] = o.TargetEntity
	}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	toSerialize["query"] = o.Query
	return toSerialize, nil
}

type NullableAudienceDefinitionEnhanced struct {
	value *AudienceDefinitionEnhanced
	isSet bool
}

func (v NullableAudienceDefinitionEnhanced) Get() *AudienceDefinitionEnhanced {
	return v.value
}

func (v *NullableAudienceDefinitionEnhanced) Set(val *AudienceDefinitionEnhanced) {
	v.value = val
	v.isSet = true
}

func (v NullableAudienceDefinitionEnhanced) IsSet() bool {
	return v.isSet
}

func (v *NullableAudienceDefinitionEnhanced) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAudienceDefinitionEnhanced(
	val *AudienceDefinitionEnhanced,
) *NullableAudienceDefinitionEnhanced {
	return &NullableAudienceDefinitionEnhanced{value: val, isSet: true}
}

func (v NullableAudienceDefinitionEnhanced) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAudienceDefinitionEnhanced) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
