/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 57.4.0
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the JourneyAnalytics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JourneyAnalytics{}

// JourneyAnalytics struct for JourneyAnalytics
type JourneyAnalytics struct {
	TopLevelAnalytics  TopLevelAnalytics    `json:"topLevelAnalytics"`
	StepLevelAnalytics []StepLevelAnalytics `json:"stepLevelAnalytics"`
}

// NewJourneyAnalytics instantiates a new JourneyAnalytics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJourneyAnalytics(
	topLevelAnalytics TopLevelAnalytics,
	stepLevelAnalytics []StepLevelAnalytics,
) *JourneyAnalytics {
	this := JourneyAnalytics{}
	this.TopLevelAnalytics = topLevelAnalytics
	this.StepLevelAnalytics = stepLevelAnalytics
	return &this
}

// NewJourneyAnalyticsWithDefaults instantiates a new JourneyAnalytics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJourneyAnalyticsWithDefaults() *JourneyAnalytics {
	this := JourneyAnalytics{}
	return &this
}

// GetTopLevelAnalytics returns the TopLevelAnalytics field value
func (o *JourneyAnalytics) GetTopLevelAnalytics() TopLevelAnalytics {
	if o == nil {
		var ret TopLevelAnalytics
		return ret
	}

	return o.TopLevelAnalytics
}

// GetTopLevelAnalyticsOk returns a tuple with the TopLevelAnalytics field value
// and a boolean to check if the value has been set.
func (o *JourneyAnalytics) GetTopLevelAnalyticsOk() (*TopLevelAnalytics, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TopLevelAnalytics, true
}

// SetTopLevelAnalytics sets field value
func (o *JourneyAnalytics) SetTopLevelAnalytics(v TopLevelAnalytics) {
	o.TopLevelAnalytics = v
}

// GetStepLevelAnalytics returns the StepLevelAnalytics field value
func (o *JourneyAnalytics) GetStepLevelAnalytics() []StepLevelAnalytics {
	if o == nil {
		var ret []StepLevelAnalytics
		return ret
	}

	return o.StepLevelAnalytics
}

// GetStepLevelAnalyticsOk returns a tuple with the StepLevelAnalytics field value
// and a boolean to check if the value has been set.
func (o *JourneyAnalytics) GetStepLevelAnalyticsOk() ([]StepLevelAnalytics, bool) {
	if o == nil {
		return nil, false
	}
	return o.StepLevelAnalytics, true
}

// SetStepLevelAnalytics sets field value
func (o *JourneyAnalytics) SetStepLevelAnalytics(v []StepLevelAnalytics) {
	o.StepLevelAnalytics = v
}

func (o JourneyAnalytics) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JourneyAnalytics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["topLevelAnalytics"] = o.TopLevelAnalytics
	toSerialize["stepLevelAnalytics"] = o.StepLevelAnalytics
	return toSerialize, nil
}

type NullableJourneyAnalytics struct {
	value *JourneyAnalytics
	isSet bool
}

func (v NullableJourneyAnalytics) Get() *JourneyAnalytics {
	return v.value
}

func (v *NullableJourneyAnalytics) Set(val *JourneyAnalytics) {
	v.value = val
	v.isSet = true
}

func (v NullableJourneyAnalytics) IsSet() bool {
	return v.isSet
}

func (v *NullableJourneyAnalytics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJourneyAnalytics(val *JourneyAnalytics) *NullableJourneyAnalytics {
	return &NullableJourneyAnalytics{value: val, isSet: true}
}

func (v NullableJourneyAnalytics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJourneyAnalytics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
