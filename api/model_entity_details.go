/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 59.6.1
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the EntityDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntityDetails{}

// EntityDetails Entity details.
type EntityDetails struct {
	// The entity primary key value.
	Id string `json:"id"`
	// The entity primary key column name.
	IdProperty string `json:"idProperty"`
	// The entity relationship slug.
	RelationshipSlug string `json:"relationshipSlug"`
	// Entity properties.
	Properties map[string]interface{} `json:"properties,omitempty"`
	// Related entities that are one level deeper will only be returned if those entities are referenced in the audience definition.
	Entities map[string]interface{} `json:"entities,omitempty"`
}

// NewEntityDetails instantiates a new EntityDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityDetails(id string, idProperty string, relationshipSlug string) *EntityDetails {
	this := EntityDetails{}
	this.Id = id
	this.IdProperty = idProperty
	this.RelationshipSlug = relationshipSlug
	return &this
}

// NewEntityDetailsWithDefaults instantiates a new EntityDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityDetailsWithDefaults() *EntityDetails {
	this := EntityDetails{}
	return &this
}

// GetId returns the Id field value
func (o *EntityDetails) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EntityDetails) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EntityDetails) SetId(v string) {
	o.Id = v
}

// GetIdProperty returns the IdProperty field value
func (o *EntityDetails) GetIdProperty() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IdProperty
}

// GetIdPropertyOk returns a tuple with the IdProperty field value
// and a boolean to check if the value has been set.
func (o *EntityDetails) GetIdPropertyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IdProperty, true
}

// SetIdProperty sets field value
func (o *EntityDetails) SetIdProperty(v string) {
	o.IdProperty = v
}

// GetRelationshipSlug returns the RelationshipSlug field value
func (o *EntityDetails) GetRelationshipSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RelationshipSlug
}

// GetRelationshipSlugOk returns a tuple with the RelationshipSlug field value
// and a boolean to check if the value has been set.
func (o *EntityDetails) GetRelationshipSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RelationshipSlug, true
}

// SetRelationshipSlug sets field value
func (o *EntityDetails) SetRelationshipSlug(v string) {
	o.RelationshipSlug = v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *EntityDetails) GetProperties() map[string]interface{} {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]interface{}
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityDetails) GetPropertiesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Properties) {
		return map[string]interface{}{}, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *EntityDetails) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]interface{} and assigns it to the Properties field.
func (o *EntityDetails) SetProperties(v map[string]interface{}) {
	o.Properties = v
}

// GetEntities returns the Entities field value if set, zero value otherwise.
func (o *EntityDetails) GetEntities() map[string]interface{} {
	if o == nil || IsNil(o.Entities) {
		var ret map[string]interface{}
		return ret
	}
	return o.Entities
}

// GetEntitiesOk returns a tuple with the Entities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityDetails) GetEntitiesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Entities) {
		return map[string]interface{}{}, false
	}
	return o.Entities, true
}

// HasEntities returns a boolean if a field has been set.
func (o *EntityDetails) HasEntities() bool {
	if o != nil && !IsNil(o.Entities) {
		return true
	}

	return false
}

// SetEntities gets a reference to the given map[string]interface{} and assigns it to the Entities field.
func (o *EntityDetails) SetEntities(v map[string]interface{}) {
	o.Entities = v
}

func (o EntityDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntityDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["idProperty"] = o.IdProperty
	toSerialize["relationshipSlug"] = o.RelationshipSlug
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.Entities) {
		toSerialize["entities"] = o.Entities
	}
	return toSerialize, nil
}

type NullableEntityDetails struct {
	value *EntityDetails
	isSet bool
}

func (v NullableEntityDetails) Get() *EntityDetails {
	return v.value
}

func (v *NullableEntityDetails) Set(val *EntityDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityDetails(val *EntityDetails) *NullableEntityDetails {
	return &NullableEntityDetails{value: val, isSet: true}
}

func (v NullableEntityDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
