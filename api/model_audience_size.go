/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 61.0.0
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the AudienceSize type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AudienceSize{}

// AudienceSize struct for AudienceSize
type AudienceSize struct {
	// The total audience membership count. Refer to the type field to determine the unit for this field (profiles, accounts, etc).
	Count *float32 `json:"count,omitempty"`
	// The unit type for the count(s) being returned.
	Type string `json:"type"`
	// The unique audience membership count.
	UniqueCount *float32 `json:"uniqueCount,omitempty"`
}

// NewAudienceSize instantiates a new AudienceSize object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAudienceSize(type_ string) *AudienceSize {
	this := AudienceSize{}
	this.Type = type_
	return &this
}

// NewAudienceSizeWithDefaults instantiates a new AudienceSize object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAudienceSizeWithDefaults() *AudienceSize {
	this := AudienceSize{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *AudienceSize) GetCount() float32 {
	if o == nil || IsNil(o.Count) {
		var ret float32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceSize) GetCountOk() (*float32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *AudienceSize) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given float32 and assigns it to the Count field.
func (o *AudienceSize) SetCount(v float32) {
	o.Count = &v
}

// GetType returns the Type field value
func (o *AudienceSize) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AudienceSize) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AudienceSize) SetType(v string) {
	o.Type = v
}

// GetUniqueCount returns the UniqueCount field value if set, zero value otherwise.
func (o *AudienceSize) GetUniqueCount() float32 {
	if o == nil || IsNil(o.UniqueCount) {
		var ret float32
		return ret
	}
	return *o.UniqueCount
}

// GetUniqueCountOk returns a tuple with the UniqueCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceSize) GetUniqueCountOk() (*float32, bool) {
	if o == nil || IsNil(o.UniqueCount) {
		return nil, false
	}
	return o.UniqueCount, true
}

// HasUniqueCount returns a boolean if a field has been set.
func (o *AudienceSize) HasUniqueCount() bool {
	if o != nil && !IsNil(o.UniqueCount) {
		return true
	}

	return false
}

// SetUniqueCount gets a reference to the given float32 and assigns it to the UniqueCount field.
func (o *AudienceSize) SetUniqueCount(v float32) {
	o.UniqueCount = &v
}

func (o AudienceSize) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AudienceSize) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.UniqueCount) {
		toSerialize["uniqueCount"] = o.UniqueCount
	}
	return toSerialize, nil
}

type NullableAudienceSize struct {
	value *AudienceSize
	isSet bool
}

func (v NullableAudienceSize) Get() *AudienceSize {
	return v.value
}

func (v *NullableAudienceSize) Set(val *AudienceSize) {
	v.value = val
	v.isSet = true
}

func (v NullableAudienceSize) IsSet() bool {
	return v.isSet
}

func (v *NullableAudienceSize) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAudienceSize(val *AudienceSize) *NullableAudienceSize {
	return &NullableAudienceSize{value: val, isSet: true}
}

func (v NullableAudienceSize) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAudienceSize) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
