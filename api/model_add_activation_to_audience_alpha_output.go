/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 58.14.0
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the AddActivationToAudienceAlphaOutput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddActivationToAudienceAlphaOutput{}

// AddActivationToAudienceAlphaOutput Activation output for create.
type AddActivationToAudienceAlphaOutput struct {
	Activation ActivationSummaryOutput `json:"activation"`
}

// NewAddActivationToAudienceAlphaOutput instantiates a new AddActivationToAudienceAlphaOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddActivationToAudienceAlphaOutput(
	activation ActivationSummaryOutput,
) *AddActivationToAudienceAlphaOutput {
	this := AddActivationToAudienceAlphaOutput{}
	this.Activation = activation
	return &this
}

// NewAddActivationToAudienceAlphaOutputWithDefaults instantiates a new AddActivationToAudienceAlphaOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddActivationToAudienceAlphaOutputWithDefaults() *AddActivationToAudienceAlphaOutput {
	this := AddActivationToAudienceAlphaOutput{}
	return &this
}

// GetActivation returns the Activation field value
func (o *AddActivationToAudienceAlphaOutput) GetActivation() ActivationSummaryOutput {
	if o == nil {
		var ret ActivationSummaryOutput
		return ret
	}

	return o.Activation
}

// GetActivationOk returns a tuple with the Activation field value
// and a boolean to check if the value has been set.
func (o *AddActivationToAudienceAlphaOutput) GetActivationOk() (*ActivationSummaryOutput, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Activation, true
}

// SetActivation sets field value
func (o *AddActivationToAudienceAlphaOutput) SetActivation(v ActivationSummaryOutput) {
	o.Activation = v
}

func (o AddActivationToAudienceAlphaOutput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddActivationToAudienceAlphaOutput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["activation"] = o.Activation
	return toSerialize, nil
}

type NullableAddActivationToAudienceAlphaOutput struct {
	value *AddActivationToAudienceAlphaOutput
	isSet bool
}

func (v NullableAddActivationToAudienceAlphaOutput) Get() *AddActivationToAudienceAlphaOutput {
	return v.value
}

func (v *NullableAddActivationToAudienceAlphaOutput) Set(val *AddActivationToAudienceAlphaOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableAddActivationToAudienceAlphaOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableAddActivationToAudienceAlphaOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddActivationToAudienceAlphaOutput(
	val *AddActivationToAudienceAlphaOutput,
) *NullableAddActivationToAudienceAlphaOutput {
	return &NullableAddActivationToAudienceAlphaOutput{value: val, isSet: true}
}

func (v NullableAddActivationToAudienceAlphaOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddActivationToAudienceAlphaOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
