/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 58.1.1
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the RandomSplitBranch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RandomSplitBranch{}

// RandomSplitBranch struct for RandomSplitBranch
type RandomSplitBranch struct {
	Percentage float32 `json:"percentage"`
	Next       string  `json:"next"`
}

// NewRandomSplitBranch instantiates a new RandomSplitBranch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRandomSplitBranch(percentage float32, next string) *RandomSplitBranch {
	this := RandomSplitBranch{}
	this.Percentage = percentage
	this.Next = next
	return &this
}

// NewRandomSplitBranchWithDefaults instantiates a new RandomSplitBranch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRandomSplitBranchWithDefaults() *RandomSplitBranch {
	this := RandomSplitBranch{}
	return &this
}

// GetPercentage returns the Percentage field value
func (o *RandomSplitBranch) GetPercentage() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Percentage
}

// GetPercentageOk returns a tuple with the Percentage field value
// and a boolean to check if the value has been set.
func (o *RandomSplitBranch) GetPercentageOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Percentage, true
}

// SetPercentage sets field value
func (o *RandomSplitBranch) SetPercentage(v float32) {
	o.Percentage = v
}

// GetNext returns the Next field value
func (o *RandomSplitBranch) GetNext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Next
}

// GetNextOk returns a tuple with the Next field value
// and a boolean to check if the value has been set.
func (o *RandomSplitBranch) GetNextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Next, true
}

// SetNext sets field value
func (o *RandomSplitBranch) SetNext(v string) {
	o.Next = v
}

func (o RandomSplitBranch) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RandomSplitBranch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["percentage"] = o.Percentage
	toSerialize["next"] = o.Next
	return toSerialize, nil
}

type NullableRandomSplitBranch struct {
	value *RandomSplitBranch
	isSet bool
}

func (v NullableRandomSplitBranch) Get() *RandomSplitBranch {
	return v.value
}

func (v *NullableRandomSplitBranch) Set(val *RandomSplitBranch) {
	v.value = val
	v.isSet = true
}

func (v NullableRandomSplitBranch) IsSet() bool {
	return v.isSet
}

func (v *NullableRandomSplitBranch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRandomSplitBranch(val *RandomSplitBranch) *NullableRandomSplitBranch {
	return &NullableRandomSplitBranch{value: val, isSet: true}
}

func (v NullableRandomSplitBranch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRandomSplitBranch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
