/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 59.6.1
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the AudienceOptionsWithLookback type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AudienceOptionsWithLookback{}

// AudienceOptionsWithLookback struct for AudienceOptionsWithLookback
type AudienceOptionsWithLookback struct {
	// The set of profile external identifiers being used to determine audience membership. Profiles will only be considered for audience membership if the profile has at least one external id whose key matches a value in this set.
	FilterByExternalIds []string `json:"filterByExternalIds"`
	// Determines whether data prior to the audience being created is included when determining audience membership. Note that including historical data may be needed in order to properly handle the definition specified. In these cases, Segment will automatically handle including historical data and the response will return the includeHistoricalData parameter as true.
	IncludeHistoricalData *bool `json:"includeHistoricalData,omitempty"`
	// If specified, the value of this field indicates the number of days, specified from the date the audience was created, that event data will be included from when determining audience membership. If unspecified, defer to the value of `includeHistoricalData` to determine whether historical data is either entirely included or entirely excluded when determining audience membership.
	BackfillEventDataDays *float32 `json:"backfillEventDataDays,omitempty"`
}

// NewAudienceOptionsWithLookback instantiates a new AudienceOptionsWithLookback object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAudienceOptionsWithLookback(filterByExternalIds []string) *AudienceOptionsWithLookback {
	this := AudienceOptionsWithLookback{}
	this.FilterByExternalIds = filterByExternalIds
	return &this
}

// NewAudienceOptionsWithLookbackWithDefaults instantiates a new AudienceOptionsWithLookback object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAudienceOptionsWithLookbackWithDefaults() *AudienceOptionsWithLookback {
	this := AudienceOptionsWithLookback{}
	return &this
}

// GetFilterByExternalIds returns the FilterByExternalIds field value
func (o *AudienceOptionsWithLookback) GetFilterByExternalIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.FilterByExternalIds
}

// GetFilterByExternalIdsOk returns a tuple with the FilterByExternalIds field value
// and a boolean to check if the value has been set.
func (o *AudienceOptionsWithLookback) GetFilterByExternalIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FilterByExternalIds, true
}

// SetFilterByExternalIds sets field value
func (o *AudienceOptionsWithLookback) SetFilterByExternalIds(v []string) {
	o.FilterByExternalIds = v
}

// GetIncludeHistoricalData returns the IncludeHistoricalData field value if set, zero value otherwise.
func (o *AudienceOptionsWithLookback) GetIncludeHistoricalData() bool {
	if o == nil || IsNil(o.IncludeHistoricalData) {
		var ret bool
		return ret
	}
	return *o.IncludeHistoricalData
}

// GetIncludeHistoricalDataOk returns a tuple with the IncludeHistoricalData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceOptionsWithLookback) GetIncludeHistoricalDataOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeHistoricalData) {
		return nil, false
	}
	return o.IncludeHistoricalData, true
}

// HasIncludeHistoricalData returns a boolean if a field has been set.
func (o *AudienceOptionsWithLookback) HasIncludeHistoricalData() bool {
	if o != nil && !IsNil(o.IncludeHistoricalData) {
		return true
	}

	return false
}

// SetIncludeHistoricalData gets a reference to the given bool and assigns it to the IncludeHistoricalData field.
func (o *AudienceOptionsWithLookback) SetIncludeHistoricalData(v bool) {
	o.IncludeHistoricalData = &v
}

// GetBackfillEventDataDays returns the BackfillEventDataDays field value if set, zero value otherwise.
func (o *AudienceOptionsWithLookback) GetBackfillEventDataDays() float32 {
	if o == nil || IsNil(o.BackfillEventDataDays) {
		var ret float32
		return ret
	}
	return *o.BackfillEventDataDays
}

// GetBackfillEventDataDaysOk returns a tuple with the BackfillEventDataDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceOptionsWithLookback) GetBackfillEventDataDaysOk() (*float32, bool) {
	if o == nil || IsNil(o.BackfillEventDataDays) {
		return nil, false
	}
	return o.BackfillEventDataDays, true
}

// HasBackfillEventDataDays returns a boolean if a field has been set.
func (o *AudienceOptionsWithLookback) HasBackfillEventDataDays() bool {
	if o != nil && !IsNil(o.BackfillEventDataDays) {
		return true
	}

	return false
}

// SetBackfillEventDataDays gets a reference to the given float32 and assigns it to the BackfillEventDataDays field.
func (o *AudienceOptionsWithLookback) SetBackfillEventDataDays(v float32) {
	o.BackfillEventDataDays = &v
}

func (o AudienceOptionsWithLookback) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AudienceOptionsWithLookback) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["filterByExternalIds"] = o.FilterByExternalIds
	if !IsNil(o.IncludeHistoricalData) {
		toSerialize["includeHistoricalData"] = o.IncludeHistoricalData
	}
	if !IsNil(o.BackfillEventDataDays) {
		toSerialize["backfillEventDataDays"] = o.BackfillEventDataDays
	}
	return toSerialize, nil
}

type NullableAudienceOptionsWithLookback struct {
	value *AudienceOptionsWithLookback
	isSet bool
}

func (v NullableAudienceOptionsWithLookback) Get() *AudienceOptionsWithLookback {
	return v.value
}

func (v *NullableAudienceOptionsWithLookback) Set(val *AudienceOptionsWithLookback) {
	v.value = val
	v.isSet = true
}

func (v NullableAudienceOptionsWithLookback) IsSet() bool {
	return v.isSet
}

func (v *NullableAudienceOptionsWithLookback) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAudienceOptionsWithLookback(
	val *AudienceOptionsWithLookback,
) *NullableAudienceOptionsWithLookback {
	return &NullableAudienceOptionsWithLookback{value: val, isSet: true}
}

func (v NullableAudienceOptionsWithLookback) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAudienceOptionsWithLookback) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
