/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 58.14.0
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the AudienceEcho type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AudienceEcho{}

// AudienceEcho The audience echo response data.
type AudienceEcho struct {
	// The echoed message.
	Message string `json:"message"`
	// The space id used for rate limiting.
	SpaceId string `json:"spaceId"`
}

// NewAudienceEcho instantiates a new AudienceEcho object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAudienceEcho(message string, spaceId string) *AudienceEcho {
	this := AudienceEcho{}
	this.Message = message
	this.SpaceId = spaceId
	return &this
}

// NewAudienceEchoWithDefaults instantiates a new AudienceEcho object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAudienceEchoWithDefaults() *AudienceEcho {
	this := AudienceEcho{}
	return &this
}

// GetMessage returns the Message field value
func (o *AudienceEcho) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *AudienceEcho) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *AudienceEcho) SetMessage(v string) {
	o.Message = v
}

// GetSpaceId returns the SpaceId field value
func (o *AudienceEcho) GetSpaceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SpaceId
}

// GetSpaceIdOk returns a tuple with the SpaceId field value
// and a boolean to check if the value has been set.
func (o *AudienceEcho) GetSpaceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SpaceId, true
}

// SetSpaceId sets field value
func (o *AudienceEcho) SetSpaceId(v string) {
	o.SpaceId = v
}

func (o AudienceEcho) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AudienceEcho) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["message"] = o.Message
	toSerialize["spaceId"] = o.SpaceId
	return toSerialize, nil
}

type NullableAudienceEcho struct {
	value *AudienceEcho
	isSet bool
}

func (v NullableAudienceEcho) Get() *AudienceEcho {
	return v.value
}

func (v *NullableAudienceEcho) Set(val *AudienceEcho) {
	v.value = val
	v.isSet = true
}

func (v NullableAudienceEcho) IsSet() bool {
	return v.isSet
}

func (v *NullableAudienceEcho) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAudienceEcho(val *AudienceEcho) *NullableAudienceEcho {
	return &NullableAudienceEcho{value: val, isSet: true}
}

func (v NullableAudienceEcho) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAudienceEcho) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
