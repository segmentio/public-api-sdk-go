/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 57.4.0
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the Activation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Activation{}

// Activation struct for Activation
type Activation struct {
	Id                 *string                   `json:"id,omitempty"`
	EventName          string                    `json:"eventName"`
	ActionDefinition   ActionDefinition          `json:"actionDefinition"`
	PropertySelections *PropertySelectionsConfig `json:"propertySelections,omitempty"`
}

// NewActivation instantiates a new Activation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivation(eventName string, actionDefinition ActionDefinition) *Activation {
	this := Activation{}
	this.EventName = eventName
	this.ActionDefinition = actionDefinition
	return &this
}

// NewActivationWithDefaults instantiates a new Activation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivationWithDefaults() *Activation {
	this := Activation{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Activation) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activation) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Activation) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Activation) SetId(v string) {
	o.Id = &v
}

// GetEventName returns the EventName field value
func (o *Activation) GetEventName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value
// and a boolean to check if the value has been set.
func (o *Activation) GetEventNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventName, true
}

// SetEventName sets field value
func (o *Activation) SetEventName(v string) {
	o.EventName = v
}

// GetActionDefinition returns the ActionDefinition field value
func (o *Activation) GetActionDefinition() ActionDefinition {
	if o == nil {
		var ret ActionDefinition
		return ret
	}

	return o.ActionDefinition
}

// GetActionDefinitionOk returns a tuple with the ActionDefinition field value
// and a boolean to check if the value has been set.
func (o *Activation) GetActionDefinitionOk() (*ActionDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActionDefinition, true
}

// SetActionDefinition sets field value
func (o *Activation) SetActionDefinition(v ActionDefinition) {
	o.ActionDefinition = v
}

// GetPropertySelections returns the PropertySelections field value if set, zero value otherwise.
func (o *Activation) GetPropertySelections() PropertySelectionsConfig {
	if o == nil || IsNil(o.PropertySelections) {
		var ret PropertySelectionsConfig
		return ret
	}
	return *o.PropertySelections
}

// GetPropertySelectionsOk returns a tuple with the PropertySelections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activation) GetPropertySelectionsOk() (*PropertySelectionsConfig, bool) {
	if o == nil || IsNil(o.PropertySelections) {
		return nil, false
	}
	return o.PropertySelections, true
}

// HasPropertySelections returns a boolean if a field has been set.
func (o *Activation) HasPropertySelections() bool {
	if o != nil && !IsNil(o.PropertySelections) {
		return true
	}

	return false
}

// SetPropertySelections gets a reference to the given PropertySelectionsConfig and assigns it to the PropertySelections field.
func (o *Activation) SetPropertySelections(v PropertySelectionsConfig) {
	o.PropertySelections = &v
}

func (o Activation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Activation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["eventName"] = o.EventName
	toSerialize["actionDefinition"] = o.ActionDefinition
	if !IsNil(o.PropertySelections) {
		toSerialize["propertySelections"] = o.PropertySelections
	}
	return toSerialize, nil
}

type NullableActivation struct {
	value *Activation
	isSet bool
}

func (v NullableActivation) Get() *Activation {
	return v.value
}

func (v *NullableActivation) Set(val *Activation) {
	v.value = val
	v.isSet = true
}

func (v NullableActivation) IsSet() bool {
	return v.isSet
}

func (v *NullableActivation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivation(val *Activation) *NullableActivation {
	return &NullableActivation{value: val, isSet: true}
}

func (v NullableActivation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
