/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 58.6.0
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the AudienceComputeCadence type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AudienceComputeCadence{}

// AudienceComputeCadence struct for AudienceComputeCadence
type AudienceComputeCadence struct {
	// The cadence type on which the audience's membership is computed. If 'BATCH', the audience is computed on a periodic basis. If 'REALTIME', the audience is continously computed.
	Type string `json:"type"`
}

// NewAudienceComputeCadence instantiates a new AudienceComputeCadence object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAudienceComputeCadence(type_ string) *AudienceComputeCadence {
	this := AudienceComputeCadence{}
	this.Type = type_
	return &this
}

// NewAudienceComputeCadenceWithDefaults instantiates a new AudienceComputeCadence object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAudienceComputeCadenceWithDefaults() *AudienceComputeCadence {
	this := AudienceComputeCadence{}
	return &this
}

// GetType returns the Type field value
func (o *AudienceComputeCadence) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AudienceComputeCadence) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AudienceComputeCadence) SetType(v string) {
	o.Type = v
}

func (o AudienceComputeCadence) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AudienceComputeCadence) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableAudienceComputeCadence struct {
	value *AudienceComputeCadence
	isSet bool
}

func (v NullableAudienceComputeCadence) Get() *AudienceComputeCadence {
	return v.value
}

func (v *NullableAudienceComputeCadence) Set(val *AudienceComputeCadence) {
	v.value = val
	v.isSet = true
}

func (v NullableAudienceComputeCadence) IsSet() bool {
	return v.isSet
}

func (v *NullableAudienceComputeCadence) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAudienceComputeCadence(
	val *AudienceComputeCadence,
) *NullableAudienceComputeCadence {
	return &NullableAudienceComputeCadence{value: val, isSet: true}
}

func (v NullableAudienceComputeCadence) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAudienceComputeCadence) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
