/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 57.4.0
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the UpdateDestinationsForJourneyAlphaInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateDestinationsForJourneyAlphaInput{}

// UpdateDestinationsForJourneyAlphaInput Update DESTINATIONS for a journey.
type UpdateDestinationsForJourneyAlphaInput struct {
	// The updated DESTINATIONS.
	StateDestinations []UpdateDestinationsInput `json:"stateDestinations"`
}

// NewUpdateDestinationsForJourneyAlphaInput instantiates a new UpdateDestinationsForJourneyAlphaInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateDestinationsForJourneyAlphaInput(
	stateDestinations []UpdateDestinationsInput,
) *UpdateDestinationsForJourneyAlphaInput {
	this := UpdateDestinationsForJourneyAlphaInput{}
	this.StateDestinations = stateDestinations
	return &this
}

// NewUpdateDestinationsForJourneyAlphaInputWithDefaults instantiates a new UpdateDestinationsForJourneyAlphaInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateDestinationsForJourneyAlphaInputWithDefaults() *UpdateDestinationsForJourneyAlphaInput {
	this := UpdateDestinationsForJourneyAlphaInput{}
	return &this
}

// GetStateDestinations returns the StateDestinations field value
func (o *UpdateDestinationsForJourneyAlphaInput) GetStateDestinations() []UpdateDestinationsInput {
	if o == nil {
		var ret []UpdateDestinationsInput
		return ret
	}

	return o.StateDestinations
}

// GetStateDestinationsOk returns a tuple with the StateDestinations field value
// and a boolean to check if the value has been set.
func (o *UpdateDestinationsForJourneyAlphaInput) GetStateDestinationsOk() ([]UpdateDestinationsInput, bool) {
	if o == nil {
		return nil, false
	}
	return o.StateDestinations, true
}

// SetStateDestinations sets field value
func (o *UpdateDestinationsForJourneyAlphaInput) SetStateDestinations(v []UpdateDestinationsInput) {
	o.StateDestinations = v
}

func (o UpdateDestinationsForJourneyAlphaInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateDestinationsForJourneyAlphaInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["stateDestinations"] = o.StateDestinations
	return toSerialize, nil
}

type NullableUpdateDestinationsForJourneyAlphaInput struct {
	value *UpdateDestinationsForJourneyAlphaInput
	isSet bool
}

func (v NullableUpdateDestinationsForJourneyAlphaInput) Get() *UpdateDestinationsForJourneyAlphaInput {
	return v.value
}

func (v *NullableUpdateDestinationsForJourneyAlphaInput) Set(
	val *UpdateDestinationsForJourneyAlphaInput,
) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDestinationsForJourneyAlphaInput) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDestinationsForJourneyAlphaInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDestinationsForJourneyAlphaInput(
	val *UpdateDestinationsForJourneyAlphaInput,
) *NullableUpdateDestinationsForJourneyAlphaInput {
	return &NullableUpdateDestinationsForJourneyAlphaInput{value: val, isSet: true}
}

func (v NullableUpdateDestinationsForJourneyAlphaInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDestinationsForJourneyAlphaInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
