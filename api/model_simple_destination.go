/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 61.1.4
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the SimpleDestination type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SimpleDestination{}

// SimpleDestination struct for SimpleDestination
type SimpleDestination struct {
	// The id of the Integration.
	Id string `json:"id"`
	// The name of the Destination.
	Name *string `json:"name,omitempty"`
	// The Source of the Destination.
	SourceId string `json:"sourceId"`
	// Whether the Integration is enabled or not.
	Enabled bool `json:"enabled"`
	// When the Integration connection was created.
	CreatedAt string `json:"createdAt"`
	// When the Integration connection was last updated.
	UpdatedAt string `json:"updatedAt"`
	// The Destination settings.
	Settings map[string]interface{} `json:"settings"`
	// The Destination id.
	DestinationId       string         `json:"destinationId"`
	Metadata            *Metadata      `json:"metadata,omitempty"`
	IdSyncConfiguration *IDSyncOptions `json:"idSyncConfiguration,omitempty"`
}

// NewSimpleDestination instantiates a new SimpleDestination object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSimpleDestination(
	id string,
	sourceId string,
	enabled bool,
	createdAt string,
	updatedAt string,
	settings map[string]interface{},
	destinationId string,
) *SimpleDestination {
	this := SimpleDestination{}
	this.Id = id
	this.SourceId = sourceId
	this.Enabled = enabled
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Settings = settings
	this.DestinationId = destinationId
	return &this
}

// NewSimpleDestinationWithDefaults instantiates a new SimpleDestination object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSimpleDestinationWithDefaults() *SimpleDestination {
	this := SimpleDestination{}
	return &this
}

// GetId returns the Id field value
func (o *SimpleDestination) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SimpleDestination) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SimpleDestination) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SimpleDestination) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimpleDestination) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SimpleDestination) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SimpleDestination) SetName(v string) {
	o.Name = &v
}

// GetSourceId returns the SourceId field value
func (o *SimpleDestination) GetSourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value
// and a boolean to check if the value has been set.
func (o *SimpleDestination) GetSourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceId, true
}

// SetSourceId sets field value
func (o *SimpleDestination) SetSourceId(v string) {
	o.SourceId = v
}

// GetEnabled returns the Enabled field value
func (o *SimpleDestination) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *SimpleDestination) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *SimpleDestination) SetEnabled(v bool) {
	o.Enabled = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *SimpleDestination) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *SimpleDestination) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *SimpleDestination) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *SimpleDestination) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *SimpleDestination) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *SimpleDestination) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetSettings returns the Settings field value
func (o *SimpleDestination) GetSettings() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value
// and a boolean to check if the value has been set.
func (o *SimpleDestination) GetSettingsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Settings, true
}

// SetSettings sets field value
func (o *SimpleDestination) SetSettings(v map[string]interface{}) {
	o.Settings = v
}

// GetDestinationId returns the DestinationId field value
func (o *SimpleDestination) GetDestinationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestinationId
}

// GetDestinationIdOk returns a tuple with the DestinationId field value
// and a boolean to check if the value has been set.
func (o *SimpleDestination) GetDestinationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationId, true
}

// SetDestinationId sets field value
func (o *SimpleDestination) SetDestinationId(v string) {
	o.DestinationId = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *SimpleDestination) GetMetadata() Metadata {
	if o == nil || IsNil(o.Metadata) {
		var ret Metadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimpleDestination) GetMetadataOk() (*Metadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *SimpleDestination) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given Metadata and assigns it to the Metadata field.
func (o *SimpleDestination) SetMetadata(v Metadata) {
	o.Metadata = &v
}

// GetIdSyncConfiguration returns the IdSyncConfiguration field value if set, zero value otherwise.
func (o *SimpleDestination) GetIdSyncConfiguration() IDSyncOptions {
	if o == nil || IsNil(o.IdSyncConfiguration) {
		var ret IDSyncOptions
		return ret
	}
	return *o.IdSyncConfiguration
}

// GetIdSyncConfigurationOk returns a tuple with the IdSyncConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimpleDestination) GetIdSyncConfigurationOk() (*IDSyncOptions, bool) {
	if o == nil || IsNil(o.IdSyncConfiguration) {
		return nil, false
	}
	return o.IdSyncConfiguration, true
}

// HasIdSyncConfiguration returns a boolean if a field has been set.
func (o *SimpleDestination) HasIdSyncConfiguration() bool {
	if o != nil && !IsNil(o.IdSyncConfiguration) {
		return true
	}

	return false
}

// SetIdSyncConfiguration gets a reference to the given IDSyncOptions and assigns it to the IdSyncConfiguration field.
func (o *SimpleDestination) SetIdSyncConfiguration(v IDSyncOptions) {
	o.IdSyncConfiguration = &v
}

func (o SimpleDestination) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SimpleDestination) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["sourceId"] = o.SourceId
	toSerialize["enabled"] = o.Enabled
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["updatedAt"] = o.UpdatedAt
	toSerialize["settings"] = o.Settings
	toSerialize["destinationId"] = o.DestinationId
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.IdSyncConfiguration) {
		toSerialize["idSyncConfiguration"] = o.IdSyncConfiguration
	}
	return toSerialize, nil
}

type NullableSimpleDestination struct {
	value *SimpleDestination
	isSet bool
}

func (v NullableSimpleDestination) Get() *SimpleDestination {
	return v.value
}

func (v *NullableSimpleDestination) Set(val *SimpleDestination) {
	v.value = val
	v.isSet = true
}

func (v NullableSimpleDestination) IsSet() bool {
	return v.isSet
}

func (v *NullableSimpleDestination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSimpleDestination(val *SimpleDestination) *NullableSimpleDestination {
	return &NullableSimpleDestination{value: val, isSet: true}
}

func (v NullableSimpleDestination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSimpleDestination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
