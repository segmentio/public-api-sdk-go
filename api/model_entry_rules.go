/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 57.4.0
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the EntryRules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntryRules{}

// EntryRules struct for EntryRules
type EntryRules struct {
	Type        string             `json:"type"`
	Concurrency *ConcurrencyConfig `json:"concurrency,omitempty"`
}

// NewEntryRules instantiates a new EntryRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntryRules(type_ string) *EntryRules {
	this := EntryRules{}
	this.Type = type_
	return &this
}

// NewEntryRulesWithDefaults instantiates a new EntryRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntryRulesWithDefaults() *EntryRules {
	this := EntryRules{}
	return &this
}

// GetType returns the Type field value
func (o *EntryRules) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EntryRules) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EntryRules) SetType(v string) {
	o.Type = v
}

// GetConcurrency returns the Concurrency field value if set, zero value otherwise.
func (o *EntryRules) GetConcurrency() ConcurrencyConfig {
	if o == nil || IsNil(o.Concurrency) {
		var ret ConcurrencyConfig
		return ret
	}
	return *o.Concurrency
}

// GetConcurrencyOk returns a tuple with the Concurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntryRules) GetConcurrencyOk() (*ConcurrencyConfig, bool) {
	if o == nil || IsNil(o.Concurrency) {
		return nil, false
	}
	return o.Concurrency, true
}

// HasConcurrency returns a boolean if a field has been set.
func (o *EntryRules) HasConcurrency() bool {
	if o != nil && !IsNil(o.Concurrency) {
		return true
	}

	return false
}

// SetConcurrency gets a reference to the given ConcurrencyConfig and assigns it to the Concurrency field.
func (o *EntryRules) SetConcurrency(v ConcurrencyConfig) {
	o.Concurrency = &v
}

func (o EntryRules) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntryRules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Concurrency) {
		toSerialize["concurrency"] = o.Concurrency
	}
	return toSerialize, nil
}

type NullableEntryRules struct {
	value *EntryRules
	isSet bool
}

func (v NullableEntryRules) Get() *EntryRules {
	return v.value
}

func (v *NullableEntryRules) Set(val *EntryRules) {
	v.value = val
	v.isSet = true
}

func (v NullableEntryRules) IsSet() bool {
	return v.isSet
}

func (v *NullableEntryRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntryRules(val *EntryRules) *NullableEntryRules {
	return &NullableEntryRules{value: val, isSet: true}
}

func (v NullableEntryRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntryRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
