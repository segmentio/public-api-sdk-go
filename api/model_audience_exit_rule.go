/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 57.4.0
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the AudienceExitRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AudienceExitRule{}

// AudienceExitRule struct for AudienceExitRule
type AudienceExitRule struct {
	ExitType           string        `json:"exitType"`
	AudienceId         string        `json:"audienceId"`
	Type               string        `json:"type"`
	Enabled            bool          `json:"enabled"`
	ConcurrencyEnabled bool          `json:"concurrencyEnabled"`
	Transitions        []Transitions `json:"transitions,omitempty"`
	Key                Key           `json:"key"`
}

// NewAudienceExitRule instantiates a new AudienceExitRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAudienceExitRule(
	exitType string,
	audienceId string,
	type_ string,
	enabled bool,
	concurrencyEnabled bool,
	key Key,
) *AudienceExitRule {
	this := AudienceExitRule{}
	this.ExitType = exitType
	this.AudienceId = audienceId
	this.Type = type_
	this.Enabled = enabled
	this.ConcurrencyEnabled = concurrencyEnabled
	this.Key = key
	return &this
}

// NewAudienceExitRuleWithDefaults instantiates a new AudienceExitRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAudienceExitRuleWithDefaults() *AudienceExitRule {
	this := AudienceExitRule{}
	return &this
}

// GetExitType returns the ExitType field value
func (o *AudienceExitRule) GetExitType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExitType
}

// GetExitTypeOk returns a tuple with the ExitType field value
// and a boolean to check if the value has been set.
func (o *AudienceExitRule) GetExitTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExitType, true
}

// SetExitType sets field value
func (o *AudienceExitRule) SetExitType(v string) {
	o.ExitType = v
}

// GetAudienceId returns the AudienceId field value
func (o *AudienceExitRule) GetAudienceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AudienceId
}

// GetAudienceIdOk returns a tuple with the AudienceId field value
// and a boolean to check if the value has been set.
func (o *AudienceExitRule) GetAudienceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AudienceId, true
}

// SetAudienceId sets field value
func (o *AudienceExitRule) SetAudienceId(v string) {
	o.AudienceId = v
}

// GetType returns the Type field value
func (o *AudienceExitRule) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AudienceExitRule) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AudienceExitRule) SetType(v string) {
	o.Type = v
}

// GetEnabled returns the Enabled field value
func (o *AudienceExitRule) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *AudienceExitRule) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *AudienceExitRule) SetEnabled(v bool) {
	o.Enabled = v
}

// GetConcurrencyEnabled returns the ConcurrencyEnabled field value
func (o *AudienceExitRule) GetConcurrencyEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ConcurrencyEnabled
}

// GetConcurrencyEnabledOk returns a tuple with the ConcurrencyEnabled field value
// and a boolean to check if the value has been set.
func (o *AudienceExitRule) GetConcurrencyEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConcurrencyEnabled, true
}

// SetConcurrencyEnabled sets field value
func (o *AudienceExitRule) SetConcurrencyEnabled(v bool) {
	o.ConcurrencyEnabled = v
}

// GetTransitions returns the Transitions field value if set, zero value otherwise.
func (o *AudienceExitRule) GetTransitions() []Transitions {
	if o == nil || IsNil(o.Transitions) {
		var ret []Transitions
		return ret
	}
	return o.Transitions
}

// GetTransitionsOk returns a tuple with the Transitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceExitRule) GetTransitionsOk() ([]Transitions, bool) {
	if o == nil || IsNil(o.Transitions) {
		return nil, false
	}
	return o.Transitions, true
}

// HasTransitions returns a boolean if a field has been set.
func (o *AudienceExitRule) HasTransitions() bool {
	if o != nil && !IsNil(o.Transitions) {
		return true
	}

	return false
}

// SetTransitions gets a reference to the given []Transitions and assigns it to the Transitions field.
func (o *AudienceExitRule) SetTransitions(v []Transitions) {
	o.Transitions = v
}

// GetKey returns the Key field value
func (o *AudienceExitRule) GetKey() Key {
	if o == nil {
		var ret Key
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *AudienceExitRule) GetKeyOk() (*Key, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *AudienceExitRule) SetKey(v Key) {
	o.Key = v
}

func (o AudienceExitRule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AudienceExitRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["exitType"] = o.ExitType
	toSerialize["audienceId"] = o.AudienceId
	toSerialize["type"] = o.Type
	toSerialize["enabled"] = o.Enabled
	toSerialize["concurrencyEnabled"] = o.ConcurrencyEnabled
	if !IsNil(o.Transitions) {
		toSerialize["transitions"] = o.Transitions
	}
	toSerialize["key"] = o.Key
	return toSerialize, nil
}

type NullableAudienceExitRule struct {
	value *AudienceExitRule
	isSet bool
}

func (v NullableAudienceExitRule) Get() *AudienceExitRule {
	return v.value
}

func (v *NullableAudienceExitRule) Set(val *AudienceExitRule) {
	v.value = val
	v.isSet = true
}

func (v NullableAudienceExitRule) IsSet() bool {
	return v.isSet
}

func (v *NullableAudienceExitRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAudienceExitRule(val *AudienceExitRule) *NullableAudienceExitRule {
	return &NullableAudienceExitRule{value: val, isSet: true}
}

func (v NullableAudienceExitRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAudienceExitRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
