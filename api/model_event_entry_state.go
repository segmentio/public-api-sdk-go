/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 58.1.1
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the EventEntryState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventEntryState{}

// EventEntryState struct for EventEntryState
type EventEntryState struct {
	Type        string        `json:"type"`
	Condition   string        `json:"condition"`
	Transitions []Transitions `json:"transitions"`
	Key         Key           `json:"key"`
}

// NewEventEntryState instantiates a new EventEntryState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventEntryState(
	type_ string,
	condition string,
	transitions []Transitions,
	key Key,
) *EventEntryState {
	this := EventEntryState{}
	this.Type = type_
	this.Condition = condition
	this.Transitions = transitions
	this.Key = key
	return &this
}

// NewEventEntryStateWithDefaults instantiates a new EventEntryState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventEntryStateWithDefaults() *EventEntryState {
	this := EventEntryState{}
	return &this
}

// GetType returns the Type field value
func (o *EventEntryState) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EventEntryState) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EventEntryState) SetType(v string) {
	o.Type = v
}

// GetCondition returns the Condition field value
func (o *EventEntryState) GetCondition() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Condition
}

// GetConditionOk returns a tuple with the Condition field value
// and a boolean to check if the value has been set.
func (o *EventEntryState) GetConditionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Condition, true
}

// SetCondition sets field value
func (o *EventEntryState) SetCondition(v string) {
	o.Condition = v
}

// GetTransitions returns the Transitions field value
func (o *EventEntryState) GetTransitions() []Transitions {
	if o == nil {
		var ret []Transitions
		return ret
	}

	return o.Transitions
}

// GetTransitionsOk returns a tuple with the Transitions field value
// and a boolean to check if the value has been set.
func (o *EventEntryState) GetTransitionsOk() ([]Transitions, bool) {
	if o == nil {
		return nil, false
	}
	return o.Transitions, true
}

// SetTransitions sets field value
func (o *EventEntryState) SetTransitions(v []Transitions) {
	o.Transitions = v
}

// GetKey returns the Key field value
func (o *EventEntryState) GetKey() Key {
	if o == nil {
		var ret Key
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *EventEntryState) GetKeyOk() (*Key, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *EventEntryState) SetKey(v Key) {
	o.Key = v
}

func (o EventEntryState) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventEntryState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["condition"] = o.Condition
	toSerialize["transitions"] = o.Transitions
	toSerialize["key"] = o.Key
	return toSerialize, nil
}

type NullableEventEntryState struct {
	value *EventEntryState
	isSet bool
}

func (v NullableEventEntryState) Get() *EventEntryState {
	return v.value
}

func (v *NullableEventEntryState) Set(val *EventEntryState) {
	v.value = val
	v.isSet = true
}

func (v NullableEventEntryState) IsSet() bool {
	return v.isSet
}

func (v *NullableEventEntryState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventEntryState(val *EventEntryState) *NullableEventEntryState {
	return &NullableEventEntryState{value: val, isSet: true}
}

func (v NullableEventEntryState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventEntryState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
