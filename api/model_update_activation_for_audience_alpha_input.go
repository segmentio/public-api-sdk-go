/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 58.12.0
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the UpdateActivationForAudienceAlphaInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateActivationForAudienceAlphaInput{}

// UpdateActivationForAudienceAlphaInput Input to update an activation.
type UpdateActivationForAudienceAlphaInput struct {
	// The Workspace id.
	WorkspaceId string `json:"workspaceId"`
	// Determines whether an activation is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// Configuration settings for the event emitter to be created.
	EventEmitter interface{} `json:"eventEmitter"`
	// Subscription info to connect the event emitter to a Destination attached to the audience.
	Subscription interface{} `json:"subscription"`
}

// NewUpdateActivationForAudienceAlphaInput instantiates a new UpdateActivationForAudienceAlphaInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateActivationForAudienceAlphaInput(
	workspaceId string,
	eventEmitter interface{},
	subscription interface{},
) *UpdateActivationForAudienceAlphaInput {
	this := UpdateActivationForAudienceAlphaInput{}
	this.WorkspaceId = workspaceId
	this.EventEmitter = eventEmitter
	this.Subscription = subscription
	return &this
}

// NewUpdateActivationForAudienceAlphaInputWithDefaults instantiates a new UpdateActivationForAudienceAlphaInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateActivationForAudienceAlphaInputWithDefaults() *UpdateActivationForAudienceAlphaInput {
	this := UpdateActivationForAudienceAlphaInput{}
	return &this
}

// GetWorkspaceId returns the WorkspaceId field value
func (o *UpdateActivationForAudienceAlphaInput) GetWorkspaceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WorkspaceId
}

// GetWorkspaceIdOk returns a tuple with the WorkspaceId field value
// and a boolean to check if the value has been set.
func (o *UpdateActivationForAudienceAlphaInput) GetWorkspaceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WorkspaceId, true
}

// SetWorkspaceId sets field value
func (o *UpdateActivationForAudienceAlphaInput) SetWorkspaceId(v string) {
	o.WorkspaceId = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *UpdateActivationForAudienceAlphaInput) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateActivationForAudienceAlphaInput) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *UpdateActivationForAudienceAlphaInput) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *UpdateActivationForAudienceAlphaInput) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetEventEmitter returns the EventEmitter field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *UpdateActivationForAudienceAlphaInput) GetEventEmitter() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.EventEmitter
}

// GetEventEmitterOk returns a tuple with the EventEmitter field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateActivationForAudienceAlphaInput) GetEventEmitterOk() (*interface{}, bool) {
	if o == nil || IsNil(o.EventEmitter) {
		return nil, false
	}
	return &o.EventEmitter, true
}

// SetEventEmitter sets field value
func (o *UpdateActivationForAudienceAlphaInput) SetEventEmitter(v interface{}) {
	o.EventEmitter = v
}

// GetSubscription returns the Subscription field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *UpdateActivationForAudienceAlphaInput) GetSubscription() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Subscription
}

// GetSubscriptionOk returns a tuple with the Subscription field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateActivationForAudienceAlphaInput) GetSubscriptionOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Subscription) {
		return nil, false
	}
	return &o.Subscription, true
}

// SetSubscription sets field value
func (o *UpdateActivationForAudienceAlphaInput) SetSubscription(v interface{}) {
	o.Subscription = v
}

func (o UpdateActivationForAudienceAlphaInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateActivationForAudienceAlphaInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["workspaceId"] = o.WorkspaceId
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if o.EventEmitter != nil {
		toSerialize["eventEmitter"] = o.EventEmitter
	}
	if o.Subscription != nil {
		toSerialize["subscription"] = o.Subscription
	}
	return toSerialize, nil
}

type NullableUpdateActivationForAudienceAlphaInput struct {
	value *UpdateActivationForAudienceAlphaInput
	isSet bool
}

func (v NullableUpdateActivationForAudienceAlphaInput) Get() *UpdateActivationForAudienceAlphaInput {
	return v.value
}

func (v *NullableUpdateActivationForAudienceAlphaInput) Set(
	val *UpdateActivationForAudienceAlphaInput,
) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateActivationForAudienceAlphaInput) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateActivationForAudienceAlphaInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateActivationForAudienceAlphaInput(
	val *UpdateActivationForAudienceAlphaInput,
) *NullableUpdateActivationForAudienceAlphaInput {
	return &NullableUpdateActivationForAudienceAlphaInput{value: val, isSet: true}
}

func (v NullableUpdateActivationForAudienceAlphaInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateActivationForAudienceAlphaInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
