/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 59.5.0
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the UpdateActivationForAudienceAlphaInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateActivationForAudienceAlphaInput{}

// UpdateActivationForAudienceAlphaInput Input to update an activation.
type UpdateActivationForAudienceAlphaInput struct {
	// Determines whether an activation is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// Activation name.
	ActivationName     *string                               `json:"activationName,omitempty"`
	Personalization    *PersonalizationInput                 `json:"personalization,omitempty"`
	DestinationMapping *DestinationSubscriptionConfiguration `json:"destinationMapping,omitempty"`
	// Whether to perform a resync after creation of the activation.
	PerformResync *bool `json:"performResync,omitempty"`
}

// NewUpdateActivationForAudienceAlphaInput instantiates a new UpdateActivationForAudienceAlphaInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateActivationForAudienceAlphaInput() *UpdateActivationForAudienceAlphaInput {
	this := UpdateActivationForAudienceAlphaInput{}
	return &this
}

// NewUpdateActivationForAudienceAlphaInputWithDefaults instantiates a new UpdateActivationForAudienceAlphaInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateActivationForAudienceAlphaInputWithDefaults() *UpdateActivationForAudienceAlphaInput {
	this := UpdateActivationForAudienceAlphaInput{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *UpdateActivationForAudienceAlphaInput) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateActivationForAudienceAlphaInput) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *UpdateActivationForAudienceAlphaInput) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *UpdateActivationForAudienceAlphaInput) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetActivationName returns the ActivationName field value if set, zero value otherwise.
func (o *UpdateActivationForAudienceAlphaInput) GetActivationName() string {
	if o == nil || IsNil(o.ActivationName) {
		var ret string
		return ret
	}
	return *o.ActivationName
}

// GetActivationNameOk returns a tuple with the ActivationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateActivationForAudienceAlphaInput) GetActivationNameOk() (*string, bool) {
	if o == nil || IsNil(o.ActivationName) {
		return nil, false
	}
	return o.ActivationName, true
}

// HasActivationName returns a boolean if a field has been set.
func (o *UpdateActivationForAudienceAlphaInput) HasActivationName() bool {
	if o != nil && !IsNil(o.ActivationName) {
		return true
	}

	return false
}

// SetActivationName gets a reference to the given string and assigns it to the ActivationName field.
func (o *UpdateActivationForAudienceAlphaInput) SetActivationName(v string) {
	o.ActivationName = &v
}

// GetPersonalization returns the Personalization field value if set, zero value otherwise.
func (o *UpdateActivationForAudienceAlphaInput) GetPersonalization() PersonalizationInput {
	if o == nil || IsNil(o.Personalization) {
		var ret PersonalizationInput
		return ret
	}
	return *o.Personalization
}

// GetPersonalizationOk returns a tuple with the Personalization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateActivationForAudienceAlphaInput) GetPersonalizationOk() (*PersonalizationInput, bool) {
	if o == nil || IsNil(o.Personalization) {
		return nil, false
	}
	return o.Personalization, true
}

// HasPersonalization returns a boolean if a field has been set.
func (o *UpdateActivationForAudienceAlphaInput) HasPersonalization() bool {
	if o != nil && !IsNil(o.Personalization) {
		return true
	}

	return false
}

// SetPersonalization gets a reference to the given PersonalizationInput and assigns it to the Personalization field.
func (o *UpdateActivationForAudienceAlphaInput) SetPersonalization(v PersonalizationInput) {
	o.Personalization = &v
}

// GetDestinationMapping returns the DestinationMapping field value if set, zero value otherwise.
func (o *UpdateActivationForAudienceAlphaInput) GetDestinationMapping() DestinationSubscriptionConfiguration {
	if o == nil || IsNil(o.DestinationMapping) {
		var ret DestinationSubscriptionConfiguration
		return ret
	}
	return *o.DestinationMapping
}

// GetDestinationMappingOk returns a tuple with the DestinationMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateActivationForAudienceAlphaInput) GetDestinationMappingOk() (*DestinationSubscriptionConfiguration, bool) {
	if o == nil || IsNil(o.DestinationMapping) {
		return nil, false
	}
	return o.DestinationMapping, true
}

// HasDestinationMapping returns a boolean if a field has been set.
func (o *UpdateActivationForAudienceAlphaInput) HasDestinationMapping() bool {
	if o != nil && !IsNil(o.DestinationMapping) {
		return true
	}

	return false
}

// SetDestinationMapping gets a reference to the given DestinationSubscriptionConfiguration and assigns it to the DestinationMapping field.
func (o *UpdateActivationForAudienceAlphaInput) SetDestinationMapping(
	v DestinationSubscriptionConfiguration,
) {
	o.DestinationMapping = &v
}

// GetPerformResync returns the PerformResync field value if set, zero value otherwise.
func (o *UpdateActivationForAudienceAlphaInput) GetPerformResync() bool {
	if o == nil || IsNil(o.PerformResync) {
		var ret bool
		return ret
	}
	return *o.PerformResync
}

// GetPerformResyncOk returns a tuple with the PerformResync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateActivationForAudienceAlphaInput) GetPerformResyncOk() (*bool, bool) {
	if o == nil || IsNil(o.PerformResync) {
		return nil, false
	}
	return o.PerformResync, true
}

// HasPerformResync returns a boolean if a field has been set.
func (o *UpdateActivationForAudienceAlphaInput) HasPerformResync() bool {
	if o != nil && !IsNil(o.PerformResync) {
		return true
	}

	return false
}

// SetPerformResync gets a reference to the given bool and assigns it to the PerformResync field.
func (o *UpdateActivationForAudienceAlphaInput) SetPerformResync(v bool) {
	o.PerformResync = &v
}

func (o UpdateActivationForAudienceAlphaInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateActivationForAudienceAlphaInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.ActivationName) {
		toSerialize["activationName"] = o.ActivationName
	}
	if !IsNil(o.Personalization) {
		toSerialize["personalization"] = o.Personalization
	}
	if !IsNil(o.DestinationMapping) {
		toSerialize["destinationMapping"] = o.DestinationMapping
	}
	if !IsNil(o.PerformResync) {
		toSerialize["performResync"] = o.PerformResync
	}
	return toSerialize, nil
}

type NullableUpdateActivationForAudienceAlphaInput struct {
	value *UpdateActivationForAudienceAlphaInput
	isSet bool
}

func (v NullableUpdateActivationForAudienceAlphaInput) Get() *UpdateActivationForAudienceAlphaInput {
	return v.value
}

func (v *NullableUpdateActivationForAudienceAlphaInput) Set(
	val *UpdateActivationForAudienceAlphaInput,
) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateActivationForAudienceAlphaInput) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateActivationForAudienceAlphaInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateActivationForAudienceAlphaInput(
	val *UpdateActivationForAudienceAlphaInput,
) *NullableUpdateActivationForAudienceAlphaInput {
	return &NullableUpdateActivationForAudienceAlphaInput{value: val, isSet: true}
}

func (v NullableUpdateActivationForAudienceAlphaInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateActivationForAudienceAlphaInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
