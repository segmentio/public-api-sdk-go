/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 59.3.0
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the ListFiltersPaginationOutput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListFiltersPaginationOutput{}

// ListFiltersPaginationOutput Pagination for list filters.
type ListFiltersPaginationOutput struct {
	// Current.
	Current *float32 `json:"current,omitempty"`
	// Next.
	Next *float32 `json:"next,omitempty"`
	// Total entries.
	TotalEntries *float32 `json:"totalEntries,omitempty"`
}

// NewListFiltersPaginationOutput instantiates a new ListFiltersPaginationOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListFiltersPaginationOutput() *ListFiltersPaginationOutput {
	this := ListFiltersPaginationOutput{}
	return &this
}

// NewListFiltersPaginationOutputWithDefaults instantiates a new ListFiltersPaginationOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListFiltersPaginationOutputWithDefaults() *ListFiltersPaginationOutput {
	this := ListFiltersPaginationOutput{}
	return &this
}

// GetCurrent returns the Current field value if set, zero value otherwise.
func (o *ListFiltersPaginationOutput) GetCurrent() float32 {
	if o == nil || IsNil(o.Current) {
		var ret float32
		return ret
	}
	return *o.Current
}

// GetCurrentOk returns a tuple with the Current field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListFiltersPaginationOutput) GetCurrentOk() (*float32, bool) {
	if o == nil || IsNil(o.Current) {
		return nil, false
	}
	return o.Current, true
}

// HasCurrent returns a boolean if a field has been set.
func (o *ListFiltersPaginationOutput) HasCurrent() bool {
	if o != nil && !IsNil(o.Current) {
		return true
	}

	return false
}

// SetCurrent gets a reference to the given float32 and assigns it to the Current field.
func (o *ListFiltersPaginationOutput) SetCurrent(v float32) {
	o.Current = &v
}

// GetNext returns the Next field value if set, zero value otherwise.
func (o *ListFiltersPaginationOutput) GetNext() float32 {
	if o == nil || IsNil(o.Next) {
		var ret float32
		return ret
	}
	return *o.Next
}

// GetNextOk returns a tuple with the Next field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListFiltersPaginationOutput) GetNextOk() (*float32, bool) {
	if o == nil || IsNil(o.Next) {
		return nil, false
	}
	return o.Next, true
}

// HasNext returns a boolean if a field has been set.
func (o *ListFiltersPaginationOutput) HasNext() bool {
	if o != nil && !IsNil(o.Next) {
		return true
	}

	return false
}

// SetNext gets a reference to the given float32 and assigns it to the Next field.
func (o *ListFiltersPaginationOutput) SetNext(v float32) {
	o.Next = &v
}

// GetTotalEntries returns the TotalEntries field value if set, zero value otherwise.
func (o *ListFiltersPaginationOutput) GetTotalEntries() float32 {
	if o == nil || IsNil(o.TotalEntries) {
		var ret float32
		return ret
	}
	return *o.TotalEntries
}

// GetTotalEntriesOk returns a tuple with the TotalEntries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListFiltersPaginationOutput) GetTotalEntriesOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalEntries) {
		return nil, false
	}
	return o.TotalEntries, true
}

// HasTotalEntries returns a boolean if a field has been set.
func (o *ListFiltersPaginationOutput) HasTotalEntries() bool {
	if o != nil && !IsNil(o.TotalEntries) {
		return true
	}

	return false
}

// SetTotalEntries gets a reference to the given float32 and assigns it to the TotalEntries field.
func (o *ListFiltersPaginationOutput) SetTotalEntries(v float32) {
	o.TotalEntries = &v
}

func (o ListFiltersPaginationOutput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListFiltersPaginationOutput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Current) {
		toSerialize["current"] = o.Current
	}
	if !IsNil(o.Next) {
		toSerialize["next"] = o.Next
	}
	if !IsNil(o.TotalEntries) {
		toSerialize["totalEntries"] = o.TotalEntries
	}
	return toSerialize, nil
}

type NullableListFiltersPaginationOutput struct {
	value *ListFiltersPaginationOutput
	isSet bool
}

func (v NullableListFiltersPaginationOutput) Get() *ListFiltersPaginationOutput {
	return v.value
}

func (v *NullableListFiltersPaginationOutput) Set(val *ListFiltersPaginationOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableListFiltersPaginationOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableListFiltersPaginationOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListFiltersPaginationOutput(
	val *ListFiltersPaginationOutput,
) *NullableListFiltersPaginationOutput {
	return &NullableListFiltersPaginationOutput{value: val, isSet: true}
}

func (v NullableListFiltersPaginationOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListFiltersPaginationOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
