/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 58.1.1
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the JourneyInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JourneyInfo{}

// JourneyInfo struct for JourneyInfo
type JourneyInfo struct {
	// The journey id.
	ContainerId string `json:"containerId"`
	// The journey name.
	Name string `json:"name"`
	// The journey description.
	Description string               `json:"description"`
	CreatedAt   string               `json:"createdAt"`
	UpdatedAt   *string              `json:"updatedAt,omitempty"`
	CreatedBy   string               `json:"createdBy"`
	UpdatedBy   *string              `json:"updatedBy,omitempty"`
	Version     JourneyVersionOutput `json:"version"`
}

// NewJourneyInfo instantiates a new JourneyInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJourneyInfo(
	containerId string,
	name string,
	description string,
	createdAt string,
	createdBy string,
	version JourneyVersionOutput,
) *JourneyInfo {
	this := JourneyInfo{}
	this.ContainerId = containerId
	this.Name = name
	this.Description = description
	this.CreatedAt = createdAt
	this.CreatedBy = createdBy
	this.Version = version
	return &this
}

// NewJourneyInfoWithDefaults instantiates a new JourneyInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJourneyInfoWithDefaults() *JourneyInfo {
	this := JourneyInfo{}
	return &this
}

// GetContainerId returns the ContainerId field value
func (o *JourneyInfo) GetContainerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContainerId
}

// GetContainerIdOk returns a tuple with the ContainerId field value
// and a boolean to check if the value has been set.
func (o *JourneyInfo) GetContainerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContainerId, true
}

// SetContainerId sets field value
func (o *JourneyInfo) SetContainerId(v string) {
	o.ContainerId = v
}

// GetName returns the Name field value
func (o *JourneyInfo) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *JourneyInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *JourneyInfo) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *JourneyInfo) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *JourneyInfo) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *JourneyInfo) SetDescription(v string) {
	o.Description = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *JourneyInfo) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *JourneyInfo) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *JourneyInfo) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *JourneyInfo) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JourneyInfo) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *JourneyInfo) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *JourneyInfo) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetCreatedBy returns the CreatedBy field value
func (o *JourneyInfo) GetCreatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *JourneyInfo) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *JourneyInfo) SetCreatedBy(v string) {
	o.CreatedBy = v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *JourneyInfo) GetUpdatedBy() string {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret string
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JourneyInfo) GetUpdatedByOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *JourneyInfo) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given string and assigns it to the UpdatedBy field.
func (o *JourneyInfo) SetUpdatedBy(v string) {
	o.UpdatedBy = &v
}

// GetVersion returns the Version field value
func (o *JourneyInfo) GetVersion() JourneyVersionOutput {
	if o == nil {
		var ret JourneyVersionOutput
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *JourneyInfo) GetVersionOk() (*JourneyVersionOutput, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *JourneyInfo) SetVersion(v JourneyVersionOutput) {
	o.Version = v
}

func (o JourneyInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JourneyInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["containerId"] = o.ContainerId
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["createdAt"] = o.CreatedAt
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	toSerialize["createdBy"] = o.CreatedBy
	if !IsNil(o.UpdatedBy) {
		toSerialize["updatedBy"] = o.UpdatedBy
	}
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

type NullableJourneyInfo struct {
	value *JourneyInfo
	isSet bool
}

func (v NullableJourneyInfo) Get() *JourneyInfo {
	return v.value
}

func (v *NullableJourneyInfo) Set(val *JourneyInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableJourneyInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableJourneyInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJourneyInfo(val *JourneyInfo) *NullableJourneyInfo {
	return &NullableJourneyInfo{value: val, isSet: true}
}

func (v NullableJourneyInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJourneyInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
