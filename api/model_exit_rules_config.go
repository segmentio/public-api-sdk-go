/*
Segment Public API

The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.

API version: 57.4.0
Contact: friends@segment.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the ExitRulesConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExitRulesConfig{}

// ExitRulesConfig The exit rules configuration.
type ExitRulesConfig struct {
	Enabled             bool                   `json:"enabled"`
	Rules               []RulesInner           `json:"rules"`
	RelatedDestinations []ExitDestinationState `json:"relatedDestinations,omitempty"`
}

// NewExitRulesConfig instantiates a new ExitRulesConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExitRulesConfig(enabled bool, rules []RulesInner) *ExitRulesConfig {
	this := ExitRulesConfig{}
	this.Enabled = enabled
	this.Rules = rules
	return &this
}

// NewExitRulesConfigWithDefaults instantiates a new ExitRulesConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExitRulesConfigWithDefaults() *ExitRulesConfig {
	this := ExitRulesConfig{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *ExitRulesConfig) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *ExitRulesConfig) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *ExitRulesConfig) SetEnabled(v bool) {
	o.Enabled = v
}

// GetRules returns the Rules field value
func (o *ExitRulesConfig) GetRules() []RulesInner {
	if o == nil {
		var ret []RulesInner
		return ret
	}

	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value
// and a boolean to check if the value has been set.
func (o *ExitRulesConfig) GetRulesOk() ([]RulesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rules, true
}

// SetRules sets field value
func (o *ExitRulesConfig) SetRules(v []RulesInner) {
	o.Rules = v
}

// GetRelatedDestinations returns the RelatedDestinations field value if set, zero value otherwise.
func (o *ExitRulesConfig) GetRelatedDestinations() []ExitDestinationState {
	if o == nil || IsNil(o.RelatedDestinations) {
		var ret []ExitDestinationState
		return ret
	}
	return o.RelatedDestinations
}

// GetRelatedDestinationsOk returns a tuple with the RelatedDestinations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExitRulesConfig) GetRelatedDestinationsOk() ([]ExitDestinationState, bool) {
	if o == nil || IsNil(o.RelatedDestinations) {
		return nil, false
	}
	return o.RelatedDestinations, true
}

// HasRelatedDestinations returns a boolean if a field has been set.
func (o *ExitRulesConfig) HasRelatedDestinations() bool {
	if o != nil && !IsNil(o.RelatedDestinations) {
		return true
	}

	return false
}

// SetRelatedDestinations gets a reference to the given []ExitDestinationState and assigns it to the RelatedDestinations field.
func (o *ExitRulesConfig) SetRelatedDestinations(v []ExitDestinationState) {
	o.RelatedDestinations = v
}

func (o ExitRulesConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExitRulesConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	toSerialize["rules"] = o.Rules
	if !IsNil(o.RelatedDestinations) {
		toSerialize["relatedDestinations"] = o.RelatedDestinations
	}
	return toSerialize, nil
}

type NullableExitRulesConfig struct {
	value *ExitRulesConfig
	isSet bool
}

func (v NullableExitRulesConfig) Get() *ExitRulesConfig {
	return v.value
}

func (v *NullableExitRulesConfig) Set(val *ExitRulesConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableExitRulesConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableExitRulesConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExitRulesConfig(val *ExitRulesConfig) *NullableExitRulesConfig {
	return &NullableExitRulesConfig{value: val, isSet: true}
}

func (v NullableExitRulesConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExitRulesConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
